C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN .\Objects\USART.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE stc_lib\USART.C OPTIMIZE(8,SPEED) BROWSE INCDIR(.\stc_
                    -lib) DEBUG OBJECTEXTEND PRINT(.\Listings\USART.lst) TABS(2) OBJECT(.\Objects\USART.obj)

line level    source

   1          
   2          #include "USART.h"
   3          
   4          
   5          COMx_Define COM1,COM2;
   6          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
   7          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
   8          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
   9          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
  10          
  11          COMx_Define COM3,COM4;
  12          u8  xdata TX3_Buffer[COM_TX3_Lenth];  //发送缓冲
  13          u8  xdata RX3_Buffer[COM_RX3_Lenth];  //接收缓冲
  14          u8  xdata TX4_Buffer[COM_TX4_Lenth];  //发送缓冲
  15          u8  xdata RX4_Buffer[COM_RX4_Lenth];  //接收缓冲
  16          
  17          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  18          {
  19   1        u8  i;
  20   1        u32 j;
  21   1        
  22   1        if(UARTx == USART1)
  23   1        {
  24   2          COM1.id = 1;
  25   2          COM1.TX_read    = 0;
  26   2          COM1.TX_write   = 0;
  27   2          COM1.B_TX_busy  = 0;
  28   2          COM1.RX_Cnt     = 0;
  29   2          COM1.RX_TimeOut = 0;
  30   2          COM1.B_RX_EN    = 0;
  31   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  32   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  33   2      
  34   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  35   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  36   2          else                  PS = 0; //低优先级中断
  37   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  38   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  39   2          {
  40   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  41   3            if(j >= 65536UL)  return 2; //错误
  42   3            j = 65536UL - j;
  43   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  44   3            {
  45   4              TR1 = 0;
  46   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  47   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  48   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  49   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  50   4              TH1 = (u8)(j>>8);
  51   4              TL1 = (u8)j;
  52   4              ET1 = 0;  //禁止中断
  53   4              TMOD &= ~0x40;  //定时
  54   4              INT_CLKO &= ~0x02;  //不输出时钟
C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 2   

  55   4              TR1  = 1;
  56   4            }
  57   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  58   3            {
  59   4              AUXR &= ~(1<<4);  //Timer stop
  60   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  61   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  62   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  63   4              TH2 = (u8)(j>>8);
  64   4              TL2 = (u8)j;
  65   4              IE2  &= ~(1<<2);  //禁止中断
  66   4              AUXR &= ~(1<<3);  //定时
  67   4              AUXR |=  (1<<4);  //Timer run enable
  68   4            }
  69   3            else return 2;  //错误
  70   3          }
  71   2          else if(COMx->UART_Mode == UART_ShiftRight)
  72   2          {
  73   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  74   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  75   3          }
  76   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  77   2          {
  78   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  79   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  80   3          }
  81   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  82   2          else                ES = 0; //禁止中断
  83   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  84   2          else                REN = 0;  //禁止接收
  85   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  86   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  87   2          else                  PCON2 &= ~(1<<4);
  88   2          return  0;
  89   2        }
  90   1      
  91   1        if(UARTx == USART2)
  92   1        {
  93   2          COM2.id = 2;
  94   2          COM2.TX_read    = 0;
  95   2          COM2.TX_write   = 0;
  96   2          COM2.B_TX_busy  = 0;
  97   2          COM2.RX_Cnt     = 0;
  98   2          COM2.RX_TimeOut = 0;
  99   2          COM2.B_RX_EN    = 0;
 100   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 101   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 102   2      
 103   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 104   2          {
 105   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 106   3            else                  IP2 &= ~1;  //低优先级中断
 107   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 108   3            else                  S2CON &= ~(1<<7); //8bit
 109   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 110   3            if(j >= 65536UL)  return 2; //错误
 111   3            j = 65536UL - j;
 112   3            AUXR &= ~(1<<4);  //Timer stop
 113   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 114   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 115   3            TH2 = (u8)(j>>8);
 116   3            TL2 = (u8)j;
C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 3   

 117   3            IE2  &= ~(1<<2);  //禁止中断
 118   3            AUXR |=  (1<<4);  //Timer run enable
 119   3          }
 120   2          else  return 2; //模式错误
 121   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 122   2          else                IE2   &= ~1;    //禁止中断
 123   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 124   2          else                S2CON &= ~(1<<4); //禁止接收
 125   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO
 126   2        }
 127   1      }
 128          
 129          
 130          /*************** 装载串口发送缓冲 *******************************/
 131          
 132          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 133          {
 134   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 135   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 136   1      
 137   1        if(COM1.B_TX_busy == 0)   //空闲
 138   1        {  
 139   2          COM1.B_TX_busy = 1;   //标志忙
 140   2          TI = 1;         //触发发送中断
 141   2        }
 142   1      }
 143          
 144          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 145          {
 146   1        TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 147   1        if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 148   1      
 149   1        if(COM2.B_TX_busy == 0)   //空闲
 150   1        {  
 151   2          COM2.B_TX_busy = 1;   //标志忙
 152   2          SET_TI2();        //触发发送中断
 153   2        }
 154   1      }
 155          
 156          void PrintString1(u8 *puts)
 157          {
 158   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 159   1      }
 160          
 161          void PrintString2(u8 *puts)
 162          {
 163   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
 164   1      }
 165          
 166          /*
 167          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 168          {
 169            if(COMx->id == 1) TX1_write2buff(dat);
 170            if(COMx->id == 2) TX2_write2buff(dat);
 171          }
 172          
 173          void PrintString(COMx_Define *COMx, u8 *puts)
 174          {
 175              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 176          }
 177          */
 178          
C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 4   

 179          
 180          /********************* UART1中断函数************************/
 181          void UART1_int (void) interrupt UART1_VECTOR
 182          {
 183   1        if(RI)
 184   1        {
 185   2          RI = 0;
 186   2          if(COM1.B_RX_EN == 0)
 187   2          {
 188   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 189   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 190   3            COM1.RX_TimeOut = TimeOutSet1;
 191   3          }
 192   2        }
 193   1      
 194   1        if(TI)
 195   1        {
 196   2          TI = 0;
 197   2          if(COM1.TX_read != COM1.TX_write)
 198   2          {
 199   3            SBUF = TX1_Buffer[COM1.TX_read];
 200   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 201   3          }
 202   2          else  COM1.B_TX_busy = 0;
 203   2        }
 204   1      }
 205          
 206          /********************* UART2中断函数************************/
 207          void UART2_int (void) interrupt UART2_VECTOR
 208          {
 209   1        if(RI2)
 210   1        {
 211   2          CLR_RI2();
 212   2          if(COM2.B_RX_EN == 0)
 213   2          {
 214   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 215   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 216   3            COM2.RX_TimeOut = TimeOutSet2;
 217   3          }
 218   2        }
 219   1      
 220   1        if(TI2)
 221   1        {
 222   2          CLR_TI2();
 223   2          if(COM2.TX_read != COM2.TX_write)
 224   2          {
 225   3            S2BUF = TX2_Buffer[COM2.TX_read];
 226   3            if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 227   3          }
 228   2          else  COM2.B_TX_busy = 0;
 229   2        }
 230   1      
 231   1      }
 232          
 233          
 234          
 235          /*******************************************************************/
 236          void TX3_write2buff(u8 dat) //写入发送缓冲，指针+1
 237          {
 238   1        TX3_Buffer[COM3.TX_write] = dat;  //装发送缓冲
 239   1        if(++COM3.TX_write >= COM_TX3_Lenth)  COM3.TX_write = 0;
 240   1      
C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 5   

 241   1        if(COM3.B_TX_busy == 0)   //空闲
 242   1        {  
 243   2          COM3.B_TX_busy = 1;   //标志忙
 244   2          SET_TI3();        //触发发送中断
 245   2        }
 246   1      }
 247          
 248          
 249          void PrintString3(u8 *puts)
 250          {
 251   1          for (; *puts != 0;  puts++)  TX3_write2buff(*puts);   //遇到停止符0结束
 252   1      }
 253          
 254          void TX4_write2buff(u8 dat) //写入发送缓冲，指针+1
 255          {
 256   1        TX4_Buffer[COM4.TX_write] = dat;  //装发送缓冲
 257   1        if(++COM4.TX_write >= COM_TX4_Lenth)  COM4.TX_write = 0;
 258   1      
 259   1        if(COM4.B_TX_busy == 0)   //空闲
 260   1        {  
 261   2          COM4.B_TX_busy = 1;   //标志忙
 262   2          SET_TI4();        //触发发送中断
 263   2        }
 264   1      }
 265          
 266          
 267          void PrintString4(u8 *puts)
 268          {
 269   1          for (; *puts != 0;  puts++)  TX4_write2buff(*puts);   //遇到停止符0结束
 270   1      }
 271          
 272          void USART3_Config(void)    //115200bps@22.1184MHz
 273          {
 274   1        S3CON = 0x10;   //8位数据,可变波特率
 275   1        S3CON |= 0x40;    //串口3选择定时器3为波特率发生器
 276   1        T4T3M |= 0x02;    //定时器3时钟为Fosc,即1T
 277   1        T3L = 0xD0;   //设定定时初值
 278   1        T3H = 0xFF;   //设定定时初值
 279   1        T4T3M |= 0x08;    //启动定时器3
 280   1      
 281   1        COM3.id = 3;
 282   1        COM3.TX_read    = 0;
 283   1        COM3.TX_write   = 0;
 284   1        COM3.B_TX_busy  = 0;
 285   1        COM3.RX_Cnt     = 0;
 286   1        COM3.RX_TimeOut = 0;
 287   1        COM3.B_RX_EN    = 0;
 288   1        COM3.B_RX_OK    = 0;
 289   1      }
 290          
 291          void USART4_Config(void)    //115200bps@22.1184MHz
 292          {
 293   1        S4CON = 0x10;   //8???,?????
 294   1        S4CON |= 0x40;    //??4?????4???????
 295   1        T4T3M |= 0x20;    //???4???Fosc,?1T
 296   1        T4L = 0xD0;   //??????
 297   1        T4H = 0xFF;   //??????
 298   1        T4T3M |= 0x80;    //?????4
 299   1      
 300   1        COM4.id = 4;
 301   1        COM4.TX_read    = 0;
 302   1        COM4.TX_write   = 0;
C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 6   

 303   1        COM4.B_TX_busy  = 0;
 304   1        COM4.RX_Cnt     = 0;
 305   1        COM4.RX_TimeOut = 0;
 306   1        COM4.B_RX_EN    = 0;
 307   1        COM4.B_RX_OK    = 0;
 308   1      
 309   1      }
 310          
 311          /********************* UART4中断函数************************/
 312          void UART3_int (void) interrupt UART3_VECTOR
 313          {
 314   1        if(RI3)
 315   1        {
 316   2          CLR_RI3();
 317   2          if(COM3.B_RX_EN == 1)
 318   2          {
 319   3            if(COM3.RX_Cnt >= COM_RX3_Lenth)  COM3.RX_Cnt = 0;
 320   3            RX3_Buffer[COM3.RX_Cnt++] = S3BUF;
 321   3            COM3.RX_TimeOut = TimeOutSet3;
 322   3          }
 323   2        }
 324   1      }
 325          
 326          void UART4_int (void) interrupt UART4_VECTOR
 327          {
 328   1        if(RI4)
 329   1        {
 330   2          CLR_RI4();
 331   2          if(COM4.B_RX_EN == 1)
 332   2          {
 333   3            if(COM4.RX_Cnt >= COM_RX2_Lenth)  COM4.RX_Cnt = 0;
 334   3            RX4_Buffer[COM4.RX_Cnt++] = S4BUF;
 335   3            COM4.RX_TimeOut = TimeOutSet4;
 336   3          }
 337   2        }
 338   1      
 339   1        if(TI4)
 340   1        {
 341   2          CLR_TI4();
 342   2          if(COM4.TX_read != COM4.TX_write)
 343   2          {
 344   3            S4BUF = TX4_Buffer[COM4.TX_read];
 345   3            if(++COM4.TX_read >= COM_TX4_Lenth)   COM4.TX_read = 0;
 346   3          }
 347   2          else  COM4.B_TX_busy = 0;
 348   2        }
 349   1      
 350   1      }
 351          
 352          
*** WARNING C291 IN LINE 127 OF stc_lib\USART.C: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1468    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1920    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.56.0.0   USART                                                             04/15/2020 21:58:03 PAGE 7   


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE WIFI
OBJECT MODULE PLACED IN .\Objects\wifi.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE APP\wifi.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC
                    -_LIB;.\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\wifi.lst) TABS(2) OBJECT(.\Objects\wifi.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      wifi.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制wifi 模块esp8266 ，为上层提供接口
   7          *******************************************************************************/
   8          #include "usart.h"
   9          #include "string.h"
  10          #include "gpio.h"
  11          #include "sys.h"
  12          #include "wifi.h"
  13          #include "http_text.h"
  14          
  15          #define WIFI_CMD_TIMEOUT_MS 3000
  16          #define WIFI_CMD_TRY_TIMES    5
  17          
  18          #define WIFI_SEND_TIMEOUT_MS  3000
  19          #define WIFI_SEND_TRY_TIMES 3
  20          
  21          typedef struct  
  22          {
  23            u8 *send;     //命令
  24            u8 *match;      //匹配
  25          }
  26          _t_WIFI_CMD_Info;
  27          
  28          /*****************************************************************************
  29          设置ESP8266 服务端模式命令和答复关键字
  30          连接流程:设置AP模式-设置ssid和密码-重启-设置多链接-开启服务器-查看ip
  31          *******************************************************************************/
  32          //恢复出厂设置
  33          const _t_WIFI_CMD_Info  CMD_Restore={"AT+RESTORE\r\n", "OK"};                
  34          //##配置ESP8266模块为AP模式，开启wifi热点。
  35          const _t_WIFI_CMD_Info  CMD_APMode={"AT+CWMODE=2\r\n", "OK"};   
  36          //wifi名：ESP8266。密码：123456。4是加密方式。4是信道
  37          const _t_WIFI_CMD_Info  CMD_SSID={"AT+CWSAP=\"AI_Lab\",\"1234567890\",4,4\r\n", "OK"};                
  38          //##重启模块使AP模式生效
  39          const _t_WIFI_CMD_Info  CMD_Reset={"AT+RST\r\n", "OK"};                      
  40          //## 1启动多连接，0关闭
  41          //这里强调一下，ESP8266作为服务器做多支持5个客户端的链接，id分配顺序是0-4。
  42          const _t_WIFI_CMD_Info  CMD_Muti={"AT+CIPMUX=1\r\n", "OK"};                
  43          //##模块开启服务器模式，端口号8080
  44          const _t_WIFI_CMD_Info  CMD_Server={"AT+CIPSERVER=1,5000\r\n", "OK"};        
  45          //##查看一下ESP8266的IP
  46          const _t_WIFI_CMD_Info  CMD_IP={"AT+CIFSR\r\n", "OK"};        
  47          
  48          
  49          /*****************************************************************************
  50          设置ESP8266 客户端 模式命令和答复关键字
  51          连接流程:设置STA模式-重启-连接wifi-开启单链接-建立TCP连接
  52          *******************************************************************************/
  53          //##配置ESP8266模块为Station 模式，开启wifi热点。
  54          const _t_WIFI_CMD_Info  CMD_STAMode={"AT+CWMODE=1\r\n", "OK"};   
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 2   

  55          //连接路由器，wifi名：HiTV_woo。密码：1234567890。
  56          const _t_WIFI_CMD_Info  CMD_Connect_WIFI={"AT+CWJAP=\"HiTV_woo_plus\",\"1234567890\"\r\n", "OK"};          
             -      
  57          //开启单链接
  58          const _t_WIFI_CMD_Info  CMD_Single={"AT+CIPMUX=0\r\n", "OK"};                
  59          //建立TCP 连接
  60          const _t_WIFI_CMD_Info  CMD_Connect_Server={"AT+CIPSTART=\"TCP\",\"192.168.1.106\",5000\r\n", "OK"};       
             - 
  61          //关闭TCP 连接
  62          const _t_WIFI_CMD_Info  CMD_Disconnect_Server={"AT+CIPCLOSE=0\r\n", "OK"};        
  63          
  64          #define WIFI_GPIO_PORT    GPIO_P5
  65          #define WIFI_GPIO_PIN   GPIO_Pin_3
  66          
  67          #define wifi_reset_pin_low()    GPIO_ClearBit(WIFI_GPIO_PORT, WIFI_GPIO_PIN)
  68          #define wifi_reset_pin_high()   GPIO_SetBit(WIFI_GPIO_PORT, WIFI_GPIO_PIN)
  69          
  70          /*****************************************************************************
  71            * @brief: 整形数字转换成字符串函数
  72            * @param: num 要转换的整数，str 转换出来的字符串的存贮控件指针
  73            * @retval:  返回去掉前面的0的整数字符串指针
  74          *******************************************************************************/
  75          u8 *int_to_str( u8 *str,u16 num)
  76          {
  77   1        u8 *p;
  78   1        str[0] = num/10000+0x30;
  79   1        str[1] = num%10000/1000+0x30;
  80   1        str[2] = num%1000/100+0x30;
  81   1        str[3] = num%100/10+0x30;
  82   1        str[4] = num%10+0x30;
  83   1        str[5] = '\0';
  84   1        p=str;
  85   1        while(*p == '0')
  86   1          p++;
  87   1        if(*p == 0)
  88   1          p++;
  89   1        return p;
  90   1      }
  91          
  92          /*****************************************************************************
  93            * @brief: esp 8266 硬件重启，需要给它一个低电平，然后延时进入控制
  94            * @param: num 要转换的整数，str 转换出来的字符串的存贮控件指针
  95            * @retval:  返回去掉前面的0的整数字符串指针
  96          *******************************************************************************/
  97          void WIFI_Reset(void)
  98          {
  99   1        GPIO_InitTypeDef  wifi_gpio_init;
 100   1      
 101   1        wifi_gpio_init.Mode=GPIO_PullUp;
 102   1        wifi_gpio_init.Pin=WIFI_GPIO_PIN;
 103   1        
 104   1        GPIO_Inilize(WIFI_GPIO_PORT, &wifi_gpio_init);
 105   1      
 106   1        wifi_reset_pin_low();
 107   1        delay_ms(100);
 108   1        wifi_reset_pin_high();
 109   1        delay_s(2);
 110   1      }
 111          /****************************************************************************************
 112            * @brief: esp8266 串口接收函数，启动接收，以块为单位接收串口信息，
 113                调用函数以后，每次以(TimeOutSet2* MS_PER_TICK) 时间接收串口信息，
 114                如果收到则返回，如果等待timeout_ms 时间仍然没有收到一个字节
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 3   

 115                函数则超时返回
 116                其中COM2.RX_TimeOut 为块接收超时计数器，每个tick 中断会-1
 117            * @param: timeout_ms, wifi 接收的超时时间
 118            * @retval:  返回接收到的字节数，接收到的块存在缓存RX2_Buffer
 119          *****************************************************************************************/
 120          u8 WIFI_Receive(u16 timeout_ms) 
 121          {
 122   1        u16 i;
 123   1        if(timeout_ms > 0)
 124   1        {
 125   2          for(i= timeout_ms/(TimeOutSet2* MS_PER_TICK); i>0; i--)   //计算在timeout_ms时间的循环次数
 126   2          {
 127   3            COM2.B_RX_EN=1;   //设置允许接收
 128   3            COM2.RX_Cnt=0;      //清零接收计数器
 129   3            COM2.B_RX_OK=0;   //清零接收标志
 130   3            COM2.RX_TimeOut=TimeOutSet2;  //设置块接收时间
 131   3            while(COM2.RX_TimeOut>0);     //如果块接收超时时间未到，继续等待
 132   3            COM2.B_RX_EN=0;     //超时时间到，停止接收
 133   3            if(COM2.B_RX_OK)      //如果收到字节
 134   3            {
 135   4              return COM2.RX_Cnt; //返回字节
 136   4            }
 137   3          }
 138   2        }
 139   1        return NULL;
 140   1      }
 141          
 142          
 143          /****************************************************************************************
 144            * @brief: 给esp8266 发送信息，并匹配缓冲区当中的字符
 145                  等待timeout_ms 如果收到匹配则返回1，否则返回0
 146            * @param: send: 要发送的命令
 147                match:  要匹配的字符串
 148                timeout_ms: 设置超时的时间ms
 149            * @retval:  如果在超时时间内收到多条消息，每条消息都与match 匹配，
 150                  成功立即返回1，超时则返回0
 151          *****************************************************************************************/
 152          u8 wifi_send_and_wait(u8 *send, u8 *match, u16 timeout_ms)
 153          {
 154   1        u8 *p;
 155   1        u16 i;
 156   1        
 157   1        Usart2SendString(send);     //发送消息
 158   1        for(i = (timeout_ms/TimeOutSet2) / MS_PER_TICK; i>0; i--)   
 159   1        {
 160   2          if(WIFI_Receive(TimeOutSet2 * MS_PER_TICK))     //等待块消息
 161   2          {
 162   3            debug(RX2_Buffer);
 163   3            if(p=strstr(RX2_Buffer,match))
 164   3            {
 165   4              debug_vip("match");
 166   4              return 1;
 167   4            }
 168   3          }
 169   2        }
 170   1        return 0;
 171   1      }
 172          /****************************************************************************************
 173            * @brief: esp8266作为服务端向连接的客户端发送函数，格式如下:
 174                  AT+CIPSEND=clientid,length    //client 连接的客户端id，length 发送的数据长度
 175                  OK
 176                  >xxxxxxx        //发送的数据
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 4   

 177                  busy s...
 178                  Recv xx bytes
 179                  SEND OK
 180                  
 181                  如果length大于实际发送的数据长度，则此次发送不发生，
 182                  如果length小于实际发送的长度，则此次发送length长度的数据，多余的数据截断丢失
 183            * @param: client_id，连接的客户端id， p发送内容指针
 184            * @retval:  成功返回1，失败0
 185          *****************************************************************************************/
 186          u8 server_send_to_client(u8 *client_id, u8 *p)
 187          {
 188   1        u8 temp[6];
 189   1        u8 cmd[30]="AT+CIPSEND=";
 190   1        u8 *str;
 191   1        u16 send_len = strlen(p);
 192   1        strcat(cmd, client_id);       //组合客户端id
 193   1        strcat(cmd, ",");
 194   1        str = int_to_str(temp, send_len);
 195   1        strcat(cmd, str);         //组合长度
 196   1        strcat(cmd, "\r\n");
 197   1      
 198   1        if( !wifi_send_and_wait(cmd, "> ", WIFI_CMD_TIMEOUT_MS ))   //发送发送命令
 199   1          return FAIL;
 200   1        if( !wifi_send_and_wait(p, "SEND OK", WIFI_SEND_TIMEOUT_MS))      //发送内容
 201   1          return FAIL;
 202   1      
 203   1        return SUCCESS;
 204   1      }
 205          /****************************************************************************************
 206            * @brief: esp8266作为客户端向连接的服务端发送函数，格式如下:
 207                  AT+CIPSEND=length   //length 发送的数据长度
 208                  OK
 209                  >xxxxxxx        //发送的数据
 210                  busy s...
 211                  Recv xx bytes
 212                  SEND OK
 213                  
 214                  如果length大于实际发送的数据长度，则此次发送不发生，
 215                  如果length小于实际发送的长度，则此次发送length长度的数据，多余的数据截断丢失
 216            * @param: p发送内容指针
 217            * @retval:  成功返回1，失败0
 218          ****************************************************************************************
 219          u8 client_send_to_server( u8 *p)
 220          {
 221            u8 temp[6];
 222            u8 cmd[30]="AT+CIPSEND=";
 223            u8 *str;
 224            u16 send_len = strlen(p);
 225            str = int_to_str(temp, send_len);
 226            strcat(cmd, str);         //组合长度
 227            strcat(cmd, "\r\n");
 228          
 229            if( !wifi_send_and_wait(cmd, "> ", WIFI_CMD_TIMEOUT_MS ))   //发送发送命令
 230              return FAIL;
 231            if( !wifi_send_and_wait(p, "SEND OK", WIFI_SEND_TIMEOUT_MS))      //发送内容
 232              return FAIL;
 233          
 234            return SUCCESS;
 235          }
 236          */
 237          /****************************************************************************************
 238            * @brief: esp8266作为服务端的http response 函数，收到http请求以后，
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 5   

 239                  调用该函数进行response (参看HTTP 协议)
 240                  分成3部分发送，先发送http 头，然后是content_length，最后content
 241            * @param: client_id，连接的客户端id， p发送内容指针
 242            * @retval:  成功返回1，失败0
 243          *****************************************************************************************/
 244          u8 WIFI_Server_HTTP_Response(u8 *client_id, u8 *content)
 245          {
 246   1        u8 http_content_lenth_string[10];
 247   1        u8 temp[6];
 248   1        u8 *p;
 249   1        u16 content_size = strlen(content);
 250   1        
 251   1        memset(http_content_lenth_string, 0, sizeof(http_content_lenth_string));
 252   1        if(!server_send_to_client(client_id, HTTP_Server_Response_Head1) )    //发送http 头，不包括content_length
 253   1          return FAIL;
 254   1        
 255   1        p = int_to_str( temp, content_size);      //发送content_length和两个换行符
 256   1        strcat(http_content_lenth_string, p);
 257   1        strcat(http_content_lenth_string,"\r\n\r\n");
 258   1        if(!server_send_to_client(client_id, http_content_lenth_string))
 259   1          return FAIL;
 260   1        
 261   1        if(!server_send_to_client(client_id, content))    //发送内容
 262   1          return FAIL;
 263   1        return SUCCESS;
 264   1      
 265   1      }
 266          /****************************************************************************************
 267            * @brief: esp8266作为客户端的http request 函数，发送服务器http请求
 268                  调用该函数进行request (参看HTTP 协议)
 269                  分成4部分发送:
 270                  1. 发送http 头前导,例如: GET /a11?
 271                  2. 发送请求参数SWITH1=ON&SWITCH2=OFF&xxxx，
 272                  3. 发送头剩余信息
 273                  4. 发送步骤2的参数
 274            * @param: h1 http 头前导, para http参数，h3头部剩余
 275            * @retval:  成功返回1，失败0
 276          *****************************************************************************************/
 277          u8 WIFI_Client_HTTP_Request(u8 *h1, u8 *para, u8 *h3)
 278          {
 279   1        u8 temp[6];
 280   1        u8 cmd[30]="AT+CIPSEND="; //发送命令
 281   1        u8 *str;
 282   1        u16 request_len = strlen(h1) + strlen(para)*2 + strlen(h3) ;  //计算长度
 283   1        str = int_to_str(temp, request_len);    //转换成长度字符
 284   1        strcat(cmd, str);         //组合长度
 285   1        strcat(cmd, "\r\n");
 286   1      
 287   1        if(!wifi_send_and_wait(cmd, "> ", WIFI_CMD_TIMEOUT_MS ))  //发送发送命令，等待回应
 288   1          return FAIL;
 289   1        Usart2SendString(h1); //发送头部1
 290   1        Usart2SendString(para); //发送参数
 291   1        Usart2SendString(h3); //发送头部3
 292   1        if(!wifi_send_and_wait(para, "SEND OK", WIFI_CMD_TIMEOUT_MS ))    //发送参数，并等待发送完成
 293   1          return FAIL;
 294   1        debug_vip("SEND OK");
 295   1        return SUCCESS;
 296   1      }
 297          /*********************************************************************************
 298          设置esp8266 为服务器模式，发个wifi热点，连接后可以进行本地控制和设置
 299          连接流程:设置AP模式-设置ssid和密码-重启-设置多链接-开启服务器-查看ip
 300          *******************************************************************************/
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 6   

 301          u8 WIFI_SetServerMode(void)
 302          {
 303   1        //设置为AP模式
 304   1        if( !wifi_send_and_wait(CMD_APMode.send, CMD_APMode.match, WIFI_CMD_TIMEOUT_MS))
 305   1          return FAIL;
 306   1        //设置wifi 热点信息
 307   1        if( !wifi_send_and_wait(CMD_SSID.send, CMD_SSID.match, WIFI_CMD_TIMEOUT_MS ))
 308   1        {
 309   2          return FAIL;
 310   2        }
 311   1        //重启
 312   1        if( !wifi_send_and_wait(CMD_Reset.send, CMD_Reset.match, WIFI_CMD_TIMEOUT_MS ))
 313   1          return FAIL;
 314   1        delay_s(2);   //重启等待
 315   1        //设置多连接，服务器模式必须设置为多连接
 316   1        if( !wifi_send_and_wait(CMD_Muti.send, CMD_Muti.match, WIFI_CMD_TIMEOUT_MS ))
 317   1          return FAIL;
 318   1        //设置服务器模式和端口
 319   1        if( !wifi_send_and_wait(CMD_Server.send, CMD_Server.match, WIFI_CMD_TIMEOUT_MS ))
 320   1          return FAIL;
 321   1        //查看ip
 322   1        if( !wifi_send_and_wait(CMD_IP.send, CMD_IP.match, WIFI_CMD_TIMEOUT_MS ))
 323   1          return FAIL;
 324   1        return SUCCESS;
 325   1      }
 326          /*****************************************************************************
 327          设置ESP8266 客户端 模式命令和答复关键字
 328          连接流程:设置STA模式-重启-连接wifi-开启单链接
 329          *******************************************************************************/
 330          u8 WIFI_SetClientMode(void)
 331          {
 332   1        //设置为station 模式
 333   1        if( !wifi_send_and_wait(CMD_STAMode.send, CMD_STAMode.match, WIFI_CMD_TIMEOUT_MS))
 334   1          return FAIL;
 335   1        if( !wifi_send_and_wait(CMD_Reset.send, CMD_Reset.match, WIFI_CMD_TIMEOUT_MS ))
 336   1          return FAIL;
 337   1        delay_s(2);
 338   1        //连接wifi，注意wifi连接用时较长，所以给了较长超时时间
 339   1        if( !wifi_send_and_wait(CMD_Connect_WIFI.send, CMD_Connect_WIFI.match, 20000 )) 
 340   1        {
 341   2          return FAIL;
 342   2        }
 343   1        //设置为单连接模式
 344   1        if( !wifi_send_and_wait(CMD_Single.send, CMD_Single.match, WIFI_CMD_TIMEOUT_MS ))
 345   1          return FAIL;
 346   1        return SUCCESS;
 347   1      }
 348          /*****************************************************************************
 349            * @brief: 客户端模式下连接服务器
 350                连接命令: AT+CIPSTART="TCP","192.168.1.106",5000\r\n
 351            * @param: ip 连接的服务器ip , port 服务器端口
 352            * @retval:  成功返回1，失败0
 353          *******************************************************************************/
 354          u8 WIFI_ClientConnectServer(u8 *ip, u8 *port)
 355          {
 356   1        u8 cmd[50] = {"AT+CIPSTART=\"TCP\",\""};
 357   1        strcat(cmd, ip);
 358   1        strcat(cmd, "\",");
 359   1        strcat(cmd, port);
 360   1        strcat(cmd, "\r\n");
 361   1        if( !wifi_send_and_wait(cmd, "CONNECT", 10000 ))
 362   1          return FAIL;
C51 COMPILER V9.56.0.0   WIFI                                                              08/03/2020 22:37:49 PAGE 7   

 363   1        return SUCCESS;
 364   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1880    ----
   CONSTANT SIZE    =    396    ----
   XDATA SIZE       =     72     198
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

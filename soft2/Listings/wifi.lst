C51 COMPILER V9.56.0.0   WIFI                                                              07/29/2020 22:02:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE WIFI
OBJECT MODULE PLACED IN .\Objects\wifi.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE APP\wifi.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC_LIB;.\APP) DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\wifi.lst) TABS(2) OBJECT(.\Objects\wifi.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      wifi.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制wifi 模块esp8266 ，为上层提供接口
   7          *******************************************************************************/
   8          #include "usart.h"
   9          #include "string.h"
  10          #include "gpio.h"
  11          #include "sys.h"
  12          #include "wifi.h"
  13          #include "http_ap.h"
  14          #define SERVER_ADDR   "119.3.233.56"
  15          #define SERVER_PORT   8000
  16          
  17          #define WIFI_CMD_TIMEOUT_MS 3000
  18          #define WIFI_CMD_TRY_TIMES    5
  19          
  20          #define WIFI_SEND_TIMEOUT_MS  3000
  21          #define WIFI_SEND_TRY_TIMES 3
  22          
  23          typedef struct  
  24          {
  25            u8 *send;     //命令
  26            u8 *match;      //匹配
  27          }
  28          _t_WIFI_CMD_Info;
  29          
  30          /*****************************************************************************
  31          设置ESP8266 服务端模式命令和答复关键字
  32          连接流程:设置AP模式-设置ssid和密码-重启-设置多链接-开启服务器-查看ip
  33          *******************************************************************************/
  34          //恢复出厂设置
  35          const _t_WIFI_CMD_Info  CMD_Restore={"AT+RESTORE\r\n", "OK"};                
  36          //##配置ESP8266模块为AP模式，开启wifi热点。
  37          const _t_WIFI_CMD_Info  CMD_APMode={"AT+CWMODE=2\r\n", "OK"};   
  38          //wifi名：ESP8266。密码：123456。4是加密方式。4是信道
  39          const _t_WIFI_CMD_Info  CMD_SSID={"AT+CWSAP=\"AI_Lab\",\"1234567890\",4,4\r\n", "OK"};                
  40          //##重启模块使AP模式生效
  41          const _t_WIFI_CMD_Info  CMD_Reset={"AT+RST\r\n", "OK"};                      
  42          //## 1启动多连接，0关闭
  43          //这里强调一下，ESP8266作为服务器做多支持5个客户端的链接，id分配顺序是0-4。
  44          const _t_WIFI_CMD_Info  CMD_Muti={"AT+CIPMUX=1\r\n", "OK"};                
  45          //##模块开启服务器模式，端口号8080
  46          const _t_WIFI_CMD_Info  CMD_Server={"AT+CIPSERVER=1,5000\r\n", "OK"};        
  47          //##查看一下ESP8266的IP
  48          const _t_WIFI_CMD_Info  CMD_IP={"AT+CIFSR\r\n", "OK"};        
  49          
  50          //ap模式下的发送命令，0连接客户端，170发送字节长度
  51          _t_WIFI_CMD_Info  CMD_Send= {"AT+CIPSEND=0,170\r\n", "OK"};
  52          
  53          /*****************************************************************************
  54          设置ESP8266 客户端 模式命令和答复关键字
C51 COMPILER V9.56.0.0   WIFI                                                              07/29/2020 22:02:59 PAGE 2   

  55          连接流程:设置STA模式-重启-连接wifi-开启单链接-建立TCP连接
  56          *******************************************************************************/
  57          //##配置ESP8266模块为Station 模式，开启wifi热点。
  58          const _t_WIFI_CMD_Info  CMD_STAMode={"AT+CWMODE=1\r\n", "OK"};   
  59          //连接路由器，wifi名：HiTV_woo。密码：1234567890。
  60          const _t_WIFI_CMD_Info  CMD_Connect_WIFI={"AT+CWJAP=\"HiTV_woo\",\"1234567890\"\r\n", "OK"};               
             - 
  61          //开启单链接
  62          const _t_WIFI_CMD_Info  CMD_Single={"AT+CIPMUX=0\r\n", "OK"};                
  63          //建立TCP 连接
  64          const _t_WIFI_CMD_Info  CMD_Connect_Server={"AT+CIPSTART=\"TCP\",\"192.168.43.118\",5000\r\n", "OK"};      
             -  
  65          
  66          #define WIFI_GPIO_PORT    GPIO_P5
  67          #define WIFI_GPIO_PIN   GPIO_Pin_3
  68          
  69          #define wifi_reset_pin_low()    GPIO_ClearBit(WIFI_GPIO_PORT, WIFI_GPIO_PIN)
  70          #define wifi_reset_pin_high()   GPIO_SetBit(WIFI_GPIO_PORT, WIFI_GPIO_PIN)
  71          
  72          /*
  73            * @brief: 整形数字转换成字符串函数
  74            * @param: num 要转换的整数，str 转换出来的字符串的存贮控件指针
  75            * @retval:  返回去掉前面的0的整数字符串指针
  76          */
  77          u8 *int_to_str( u8 *str,u16 num)
  78          {
  79   1        u8 *p;
  80   1        str[0] = num/10000+0x30;
  81   1        str[1] = num%10000/1000+0x30;
  82   1        str[2] = num%1000/100+0x30;
  83   1        str[3] = num%100/10+0x30;
  84   1        str[4] = num%10+0x30;
  85   1        str[5] = '\0';
  86   1        p=str;
  87   1        while(*p == '0')
  88   1          p++;
  89   1        if(*p == 0)
  90   1          p++;
  91   1        return p;
  92   1      }
  93          
  94          //esp8266硬件重启
  95          void wifi_reset(void)
  96          {
  97   1        GPIO_InitTypeDef  wifi_gpio_init;
  98   1      
  99   1        wifi_gpio_init.Mode=GPIO_PullUp;
 100   1        wifi_gpio_init.Pin=WIFI_GPIO_PIN;
 101   1        
 102   1        GPIO_Inilize(WIFI_GPIO_PORT, &wifi_gpio_init);
 103   1      
 104   1        wifi_reset_pin_low();
 105   1        delay_ms(100);
 106   1        wifi_reset_pin_high();
 107   1        delay_s(2);
 108   1      }
 109          /****************************************************************************************
 110            * @brief: esp8266 串口接收函数，启动接收，以块为单位接收串口信息，
 111                调用函数以后，如果TimeOutSet2*(ms/tick) 时间内接收不到新字节
 112                接收块结束，返回接收到的字节数，本函数为阻塞函数  
 113                阻塞时间为: 接收块时间+ TimeOutSet2
 114            * @param: none
C51 COMPILER V9.56.0.0   WIFI                                                              07/29/2020 22:02:59 PAGE 3   

 115            * @retval:  返回接收到的字节数，接收到的块存在缓存RX2_Buffer
 116          *****************************************************************************************/
 117          u8 wifi_receive()
 118          {
 119   1        COM2.B_RX_EN=1;
 120   1        COM2.RX_Cnt=0;
 121   1        COM2.B_RX_OK=0;
 122   1        COM2.RX_TimeOut=TimeOutSet2;
 123   1        while(COM2.RX_TimeOut>0);     //每次串口接收不到字节产生超时，判定为一次块接收完成
 124   1        COM2.B_RX_EN=0;
 125   1        if(COM2.B_RX_OK)
 126   1        {
 127   2          return COM2.RX_Cnt;
 128   2        }
 129   1        return NULL;
 130   1      }
 131          
 132          
 133          /****************************************************************************************
 134            * @brief: 给esp8266 发送命令，并匹配缓冲区当中的字符        
 135            * @param: send: 要发送的命令
 136                match:  要匹配的字符串
 137                timeout_ticks:  设置超时的时间ms
 138            * @retval:  如果在超时时间内收到多条消息，每条消息都与match 匹配，
 139                  成功立即返回1，超时则返回0
 140          *****************************************************************************************/
 141          
 142          u8 WIFI_SendAndWait(u8 *send, u8 *match, u16 timeout_ms)
 143          {
 144   1        u8 *p;
 145   1        u8 i;
 146   1        Usart2SendString(send);     //发送命令
 147   1        for(i = timeout_ms/(TimeOutSet2 * MS_PER_TICK); i>0; i--)   
 148   1        {
 149   2          if(wifi_receive())      //等待块消息
 150   2          {
 151   3            debug(RX2_Buffer);
 152   3            if(p=strstr(RX2_Buffer,match))
 153   3            {
 154   4              debug_vip("match");
 155   4              return 1;
 156   4            }
 157   3          }
 158   2        }
 159   1        return 0;
 160   1      }
 161          /****************************************************************************************
 162            * @brief: 客户端连接 发送函数，先发送准备发送的命令，AT+CIPSEND=clientid,length ，
 163                  参数是client的号（0-4），和发送数据的长度，然后才是内容，
 164                  如果length大于实际发送的数据长度，则此次发送不发生，
 165                  如果length小于实际发送的长度，则此次发送length长度的数据，多余的数据截断丢失
 166            * @param: client_id，连接的客户端id， p发送内容指针
 167            * @retval:  成功返回1，失败0
 168          *****************************************************************************************/
 169          u8 send_to_client(u8 *client_id, u8 *p)
 170          {
 171   1        u8 temp[6];
 172   1        u8 cmd[30]="AT+CIPSEND=";
 173   1        u8 *str;
 174   1        u16 send_len = strlen(p);
 175   1        strcat(cmd, client_id);       //组合客户端id
 176   1        strcat(cmd, ",");
C51 COMPILER V9.56.0.0   WIFI                                                              07/29/2020 22:02:59 PAGE 4   

 177   1        str = int_to_str(temp, send_len);
 178   1        strcat(cmd, str);         //组合长度
 179   1        strcat(cmd, "\r\n");
 180   1      
 181   1        if( !WIFI_SendAndWait(cmd, "> ", WIFI_CMD_TIMEOUT_MS ))   //发送发送命令
 182   1          return FAIL;
 183   1        if( !WIFI_SendAndWait(p, "SEND OK", WIFI_SEND_TIMEOUT_MS))      //发送内容
 184   1          return FAIL;
 185   1      
 186   1        return SUCCESS;
 187   1      }
 188          u8 send_to_server( u8 *p)
 189          {
 190   1        u8 temp[6];
 191   1        u8 cmd[30]="AT+CIPSEND=";
 192   1        u8 *str;
 193   1        u16 send_len = strlen(p);
 194   1        str = int_to_str(temp, send_len);
 195   1        strcat(cmd, str);         //组合长度
 196   1        strcat(cmd, "\r\n");
 197   1      
 198   1        if( !WIFI_SendAndWait(cmd, "> ", WIFI_CMD_TIMEOUT_MS ))   //发送发送命令
 199   1          return FAIL;
 200   1        if( !WIFI_SendAndWait(p, "SEND OK", WIFI_SEND_TIMEOUT_MS))      //发送内容
 201   1          return FAIL;
 202   1      
 203   1        return SUCCESS;
 204   1      }
 205          
 206          /****************************************************************************************
 207            * @brief: http送函数，先发送发送http 头，然后是content_length，最后content
 208            * @param: client_id，连接的客户端id， p发送内容指针
 209            * @retval:  成功返回1，失败0
 210          *****************************************************************************************/
 211          u8 http_send(u8 *client_id, u8 *content)
 212          {
 213   1        u8 http_content_lenth_string[10];
 214   1        u8 temp[6];
 215   1        u8 *p;
 216   1        u16 content_size = strlen(content);
 217   1        
 218   1        memset(http_content_lenth_string, 0, sizeof(http_content_lenth_string));
 219   1        if(!send_to_client(client_id, HTTP_H1) )    //发送http 头，不包括content_length
 220   1          return FAIL;
 221   1        
 222   1        p = int_to_str( temp, content_size);      //发送content_length和两个换行符
 223   1        strcat(http_content_lenth_string, p);
 224   1        strcat(http_content_lenth_string,"\r\n\r\n");
 225   1        if(!send_to_client(client_id, http_content_lenth_string))
 226   1          return FAIL;
 227   1        
 228   1        if(!send_to_client(client_id, content))   //发送内容
 229   1          return FAIL;
 230   1        return SUCCESS;
 231   1      
 232   1      }
 233          
 234          
 235          
 236          u8 WIFI_Set_AP_mode(void)
 237          {
 238   1        if( !WIFI_SendAndWait(CMD_APMode.send, CMD_APMode.match, WIFI_CMD_TIMEOUT_MS))
C51 COMPILER V9.56.0.0   WIFI                                                              07/29/2020 22:02:59 PAGE 5   

 239   1          return FAIL;
 240   1        if( !WIFI_SendAndWait(CMD_SSID.send, CMD_SSID.match, WIFI_CMD_TIMEOUT_MS ))
 241   1        {
 242   2          return FAIL;
 243   2        }
 244   1        if( !WIFI_SendAndWait(CMD_Reset.send, CMD_Reset.match, WIFI_CMD_TIMEOUT_MS ))
 245   1          return FAIL;
 246   1        delay_s(2);
 247   1        if( !WIFI_SendAndWait(CMD_Muti.send, CMD_Muti.match, WIFI_CMD_TIMEOUT_MS ))
 248   1          return FAIL;
 249   1        if( !WIFI_SendAndWait(CMD_Server.send, CMD_Server.match, WIFI_CMD_TIMEOUT_MS ))
 250   1          return FAIL;
 251   1        if( !WIFI_SendAndWait(CMD_IP.send, CMD_IP.match, WIFI_CMD_TIMEOUT_MS ))
 252   1          return FAIL;
 253   1        return SUCCESS;
 254   1      }
 255          
 256          u8 WIFI_Set_Client_mode(void)
 257          {
 258   1        if( !WIFI_SendAndWait(CMD_STAMode.send, CMD_STAMode.match, WIFI_CMD_TIMEOUT_MS))
 259   1          return FAIL;
 260   1        if( !WIFI_SendAndWait(CMD_Reset.send, CMD_Reset.match, WIFI_CMD_TIMEOUT_MS ))
 261   1          return FAIL;
 262   1        delay_s(3);
 263   1        //注意wifi连接用时较长
 264   1        if( !WIFI_SendAndWait(CMD_Connect_WIFI.send, CMD_Connect_WIFI.match, 20000 )) 
 265   1        {
 266   2          return FAIL;
 267   2        }
 268   1        if( !WIFI_SendAndWait(CMD_Single.send, CMD_Single.match, WIFI_CMD_TIMEOUT_MS ))
 269   1          return FAIL;
 270   1        //服务器连接也给较长时间
 271   1        if( !WIFI_SendAndWait(CMD_Connect_Server.send, CMD_Connect_Server.match, 10000 ))
 272   1          return FAIL;
 273   1        return SUCCESS;
 274   1      }
 275          
 276          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1576    ----
   CONSTANT SIZE    =    334    ----
   XDATA SIZE       =     72     135
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

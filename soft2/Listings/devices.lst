C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DEVICES
OBJECT MODULE PLACED IN .\Objects\devices.obj
COMPILER INVOKED BY: d:\Keil_C51\C51\BIN\C51.EXE APP\devices.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC_LIB;.\APP) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\devices.lst) TABS(2) OBJECT(.\Objects\devices.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      devices.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制AI  实验板与上层控制设备的交互
   7          协议: 
   8              设置wifi: 命令"SETWIFI ssid password", 成功返回"OK", 失败返回"FAIL"
   9              设置switch: 命令"SWITCHx ON/OFF", 成功返回"OK", 失败返回"FAIL"
  10              设置light: 命令"LIGHTx ON/OFF/INC/DEC", 成功返回"OK", 失败返回"FAIL"
  11              获取temp: 命令"TEMP", 返回"OK temp"
  12              获取humi: 命令"HUMI", 返回"OK humi"
  13          *******************************************************************************/
  14          
  15          #include "usart.h"
  16          #include "devices.h"
  17          #include "string.h"
  18          #include "bsp.h"
  19          #include  "PCA.h"
  20          #include<intrins.h>
  21          
  22          #define KEYWORD_SWITCH  "SWITCH"
  23          #define KEYWORD_LIGHT   "LIGHT"
  24          #define KEYWORD_TEMP    "TEMP"
  25          #define KEYWORD_HUMI    "HUMI"
  26          #define KEYWORD_SETWIFI "SETWIFI"
  27          #define PCA_LIGHT1  PCA2
  28          #define PCA_LIGHT2  7
  29          #define LIGHT1_ID PCA2
  30          #define LIGHT2_ID 7
  31          
  32          #define LIGHT_POWER_MAX 0xff
  33          #define LIGHT_POWER_MIN 0x00
  34          #define LIGHT_INIT_POWER  160
  35          #define LIGHT_POWER_INC 40
  36          #define LIGHT_POWER_DEC 40
  37          
  38          #define LIGHT1_PWM_SET    0xff - Light1Power
  39          #define LIGHT2_PWM_SET    0xff - Light2Power
  40          
  41          u8 Light1Power;
  42          u8 Light2Power;
  43          
  44          static void DHT11_Start(void)
  45          {     
  46   1        DH_Pin=1;   
  47   1        delay_10us(1);
  48   1        DH_Pin=0;   
  49   1        delay_ms(18);   //延时18ms以上   
  50   1        DH_Pin=1;   
  51   1        delay_10us(4);
  52   1      }
  53          
  54          static u8 DHT11_rec_byte(void)      //接收一个字节
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 2   

  55          {   
  56   1        u8 i,dat=0;  
  57   1        for(i=0;i<8;i++)    //从高到低依次接收8位数据   
  58   1        {                
  59   2          while(!DH_Pin);   ////等待50us低电平过去      ，延时函数有误差
  60   2          delay_10us(2);
  61   2          dat<<=1;           //移位使正确接收8位数据，数据为0时直接移位      
  62   2          if(DH_Pin==1)    //数据为1时，使dat加1来接收数据1         
  63   2          dat+=1;      
  64   2          while(DH_Pin);  //等待数据线拉低        
  65   2        }     
  66   1        return dat;
  67   1      }
  68          
  69          static s16 DHT11_Receive(u8 *cmd)      //接收40位的数据
  70          {    
  71   1        u8 RH=0,RL=0,TH=0,TL=0,check=0;    
  72   1        u16 temp, humi;
  73   1        DHT11_Start();    
  74   1        if(DH_Pin==0)    
  75   1        {        
  76   2          while(DH_Pin==0);   //等待拉高       
  77   2          EA=0;
  78   2          delay_10us(8);  //拉高后延时80us        
  79   2          RH=DHT11_rec_byte();    //接收湿度高八位         
  80   2          RL=DHT11_rec_byte();    //接收湿度低八位          
  81   2          TH=DHT11_rec_byte();    //接收温度高八位         
  82   2          TL=DHT11_rec_byte();    //接收温度低八位       
  83   2          check=DHT11_rec_byte(); //接收校正位        
  84   2          EA=1;
  85   2          if((RH+RL+TH+TL)==check)      //校正        
  86   2            debug("DHT11 true  \r\n");
  87   2          else
  88   2            debug("DHT11 false  \r\n");
  89   2      
  90   2          temp = TH;
  91   2          humi = RH;
  92   2      
  93   2        }
  94   1        if(strstr(cmd, KEYWORD_TEMP))
  95   1          return temp;
  96   1        else if(strstr(cmd, KEYWORD_HUMI))
  97   1          return humi;
  98   1        return 0xffff;
  99   1      }
 100          
 101          static u8 SwitchControl(u8 *buf)
 102          {
 103   1        u8 *cmd=buf;
 104   1      //  debug(cmd);
 105   1        switch(*(cmd+sizeof(KEYWORD_SWITCH)))
 106   1        {
 107   2          case '1':
 108   2            if(strstr((char *)cmd, "ON"))
 109   2            {
 110   3              SWITCH1_ON();
 111   3              debug("1 on!\r\n");
 112   3            }
 113   2            else if(strstr((char *)cmd, "OFF"))
 114   2            {
 115   3              SWITCH1_OFF();
 116   3              debug("1 off!\r\n");
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 3   

 117   3            }
 118   2            break;
 119   2          case '2':
 120   2            if(strstr((char *)cmd, "ON"))
 121   2            {
 122   3              SWITCH2_ON();
 123   3              debug("2 on!\r\n");
 124   3            }
 125   2            else if(strstr((char *)cmd, "OFF"))
 126   2            {
 127   3              SWITCH2_OFF();
 128   3              debug("2 off!\r\n");
 129   3            }
 130   2            break;
 131   2          case '3':
 132   2            if(strstr((char *)cmd, "ON"))
 133   2            {
 134   3              SWITCH3_ON();
 135   3              debug("3 on!\r\n");
 136   3            }
 137   2            else if(strstr((char *)cmd, "OFF"))
 138   2            {
 139   3              SWITCH3_OFF();
 140   3              debug("3 off!\r\n");
 141   3            }
 142   2            break;
 143   2          case '4':
 144   2            if(strstr((char *)cmd, "ON"))
 145   2            {
 146   3              SWITCH4_ON();
 147   3              debug("4 on!\r\n");
 148   3            }
 149   2            else if(strstr((char *)cmd, "OFF"))
 150   2            {
 151   3              SWITCH4_OFF();
 152   3              debug("4 off!\r\n");
 153   3            }
 154   2            break;
 155   2          default:
 156   2            debug("switch invalid command\r\n");
 157   2            return 0;
 158   2            break;
 159   2        }
 160   1        return 1;
 161   1      }
 162          static u8 LightOn(u8 light_id)
 163          {
 164   1        if (light_id==LIGHT1_ID)
 165   1        {
 166   2          Light1Power=LIGHT_INIT_POWER;
 167   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 168   2          return 1;
 169   2        }
 170   1        else if (light_id==LIGHT2_ID)
 171   1        {
 172   2          Light2Power=LIGHT_INIT_POWER;
 173   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 174   2          return 1;
 175   2        }
 176   1        else 
 177   1          return 0;
 178   1      }
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 4   

 179          static u8 LightOff(u8 light_id)
 180          {
 181   1        if (light_id==LIGHT1_ID)
 182   1        {
 183   2          Light1Power=LIGHT_POWER_MIN;
 184   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 185   2          return 1;
 186   2        }
 187   1        else if (light_id==LIGHT2_ID)
 188   1        {
 189   2          Light2Power=0;
 190   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 191   2          return 1;
 192   2        }
 193   1        else 
 194   1          return 0;
 195   1      }
 196          
 197          static u8 LightPowerInc(u8 light_id)
 198          {
 199   1        if (light_id==LIGHT1_ID)
 200   1        {
 201   2          if((LIGHT_POWER_MAX - Light1Power) < LIGHT_POWER_INC)
 202   2            Light1Power=LIGHT_POWER_MAX;
 203   2          else
 204   2            Light1Power += LIGHT_POWER_INC;
 205   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 206   2          return 1;
 207   2        }
 208   1        else if (light_id==LIGHT2_ID)
 209   1        {
 210   2          if((LIGHT_POWER_MAX - Light2Power) < LIGHT_POWER_INC)
 211   2            Light2Power=LIGHT_POWER_MAX;
 212   2          else
 213   2            Light2Power += LIGHT_POWER_INC;
 214   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 215   2          return 1;
 216   2        }
 217   1        else 
 218   1          return 0;
 219   1      }
 220          static u8 LightPowerDec(u8 light_id)
 221          {
 222   1        if (light_id==LIGHT1_ID)
 223   1        {
 224   2          if((Light1Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 225   2            Light1Power=LIGHT_POWER_MIN;
 226   2          else
 227   2            Light1Power -= LIGHT_POWER_DEC;
 228   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 229   2          return 1;
 230   2        }
 231   1        else if (light_id==LIGHT2_ID)
 232   1        {
 233   2          if((Light2Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 234   2            Light2Power=LIGHT_POWER_MIN;
 235   2          else
 236   2            Light2Power -= LIGHT_POWER_DEC;
 237   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 238   2          return 1;
 239   2        }
 240   1        else 
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 5   

 241   1          return 0;
 242   1      }
 243          
 244          static u8 LightControl(u8 *buf)
 245          {
 246   1        u8 *cmd=buf;
 247   1        u8 *p;
 248   1        if( p=strstr(cmd, KEYWORD_LIGHT))
 249   1        {
 250   2          switch(*(p+sizeof(KEYWORD_LIGHT)))
 251   2          {
 252   3            case '1':
 253   3              if(strstr((char *)cmd, "ON"))
 254   3              {
 255   4                LightOn(LIGHT1_ID);
 256   4                debug("light1 on!\r\n");
 257   4              }
 258   3              else if(strstr((char *)cmd, "OFF"))
 259   3              {
 260   4                LightOff(LIGHT1_ID);
 261   4                debug("light1 off!\r\n");
 262   4              }
 263   3              else if(strstr((char *)cmd, "INC"))
 264   3              {
 265   4                LightPowerInc(LIGHT1_ID);
 266   4                debug("light1 inc!\r\n");
 267   4              }
 268   3              else if(strstr((char *)cmd, "DEC"))
 269   3              {
 270   4                LightPowerDec(LIGHT1_ID);
 271   4                debug("light1 dec!\r\n");
 272   4              }
 273   3              break;
 274   3            case '2':
 275   3              if(strstr((char *)cmd, "ON"))
 276   3              {
 277   4                LightOn(LIGHT2_ID);
 278   4                debug("light1 on!\r\n");
 279   4              }
 280   3              else if(strstr((char *)cmd, "OFF"))
 281   3              {
 282   4                LightOff(LIGHT2_ID);
 283   4                debug("light1 off!\r\n");
 284   4              }
 285   3              else if(strstr((char *)cmd, "INC"))
 286   3              {
 287   4                LightPowerInc(LIGHT2_ID);
 288   4                debug("light2 inc!\r\n");
 289   4              }
 290   3              else if(strstr((char *)cmd, "DEC"))
 291   3              {
 292   4                LightPowerDec(LIGHT2_ID);
 293   4                debug("light2 dec!\r\n");
 294   4              }
 295   3              break;
 296   3            default:
 297   3              debug("light invalid command222\r\n");
 298   3              break;
 299   3          }
 300   2        }
 301   1        else
 302   1        {
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 6   

 303   2          debug("invalid command111\r\n");
 304   2        }
 305   1        return 1;
 306   1      }
 307          
 308          void DevicesInit(void)
 309          {
 310   1        GPIO_InitTypeDef  light_pin_init, switch_pin_init, dh_pin_init;
 311   1        PCA_InitTypeDef pca_init;
 312   1      
 313   1        switch_pin_init.Mode=GPIO_OUT_PP;
 314   1        switch_pin_init.Pin=SWITCH1_GPIO_PIN;
 315   1        GPIO_Inilize(SWITCH1_GPIO_PORT,&switch_pin_init);
 316   1        switch_pin_init.Pin=SWITCH2_GPIO_PIN|SWITCH3_GPIO_PIN|SWITCH4_GPIO_PIN;
 317   1        GPIO_Inilize(SWITCH2_GPIO_PORT,&switch_pin_init);
 318   1      
 319   1        dh_pin_init.Mode=GPIO_PullUp;
 320   1        dh_pin_init.Pin=DH_GPIO_PIN;
 321   1        GPIO_Inilize(DH_GPIO_PORT, &dh_pin_init);
 322   1      
 323   1        light_pin_init.Mode=GPIO_OUT_PP;
 324   1        light_pin_init.Pin=LIGHT1_GPIO_PIN;
 325   1        GPIO_Inilize(LIGHT1_GPIO_PORT, &light_pin_init);
 326   1        light_pin_init.Pin=LIGHT2_GPIO_PIN;
 327   1        GPIO_Inilize(LIGHT2_GPIO_PORT, &light_pin_init);
 328   1        
 329   1        pca_init.PCA_IoUse = PCA_P12_P11_P10_P37;
 330   1        pca_init.PCA_Clock = PCA_Clock_12T;
 331   1        pca_init.PCA_Mode = PCA_Mode_PWM;
 332   1        pca_init.PCA_PWM_Wide = PCA_PWM_8bit;
 333   1        pca_init.PCA_Interrupt_Mode = DISABLE;
 334   1        pca_init.PCA_Polity = PolityHigh;
 335   1        pca_init.PCA_Value = 0;
 336   1      
 337   1        PCA_Init(PCA_Counter, &pca_init);
 338   1        PCA_Init(PCA_LIGHT1, &pca_init);
 339   1        PCA_Init(PCA_LIGHT2, &pca_init);
 340   1      
 341   1        SWITCH1_OFF();
 342   1        SWITCH2_OFF();
 343   1        SWITCH3_OFF();
 344   1        SWITCH4_OFF();
 345   1      
 346   1        LightOff(PCA_LIGHT1);
 347   1        LightOff(PCA_LIGHT2);
 348   1      
 349   1        Light1Power=0;
 350   1        Light2Power=0;
 351   1      }
 352          
 353          void DevicesControl(u8 *cmd)
 354          {
 355   1        u8 *p;
 356   1        p=strstr(cmd, KEYWORD_SETWIFI);
 357   1        if(p)
 358   1        {
 359   2        }
 360   1        else if(p=strstr(cmd, KEYWORD_SWITCH))
 361   1        {
 362   2          if(SwitchControl(p))
 363   2            wifi_send("OK");
 364   2          else
C51 COMPILER V9.56.0.0   DEVICES                                                           07/08/2020 20:40:32 PAGE 7   

 365   2            wifi_send("FAIL");
 366   2        }
 367   1        else if(p=strstr(cmd, KEYWORD_LIGHT))
 368   1          LightControl(p);
 369   1        else if(p=strstr(cmd, KEYWORD_TEMP))
 370   1          DHT11_Receive(p);
 371   1        else if(p=strstr(cmd, KEYWORD_HUMI))
 372   1          DHT11_Receive(p);
 373   1        
 374   1      }
 375          
 376          
 377          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2004    ----
   CONSTANT SIZE    =    309    ----
   XDATA SIZE       =      2      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

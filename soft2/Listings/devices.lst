C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DEVICES
OBJECT MODULE PLACED IN .\Objects\devices.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE APP\devices.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC_LIB;.\APP) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\devices.lst) TABS(2) OBJECT(.\Objects\devices.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      devices.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制AI  实验板与上层控制设备的交互
   7          协议: 
   8              设置wifi: 命令"SETWIFI ssid password", 成功返回"OK", 失败返回"FAIL"
   9              设置switch: 命令"SWITCHx ON/OFF", 成功返回"OK", 失败返回"FAIL"
  10              设置light: 命令"LIGHTx ON/OFF/INC/DEC", 成功返回"OK", 失败返回"FAIL"
  11              获取temp: 命令"TEMP", 返回"OK temp"
  12              获取humi: 命令"HUMI", 返回"OK humi"
  13          *******************************************************************************/
  14          
  15          #include "usart.h"
  16          #include "devices.h"
  17          #include "string.h"
  18          #include "bsp.h"
  19          #include  "PCA.h"
  20          #include<intrins.h>
  21          
  22          #define KEYWORD_SWITCH  "SWITCH"
  23          #define KEYWORD_LIGHT   "LIGHT"
  24          #define KEYWORD_TEMP    "TEMP"
  25          #define KEYWORD_HUMI    "HUMI"
  26          #define KEYWORD_SETWIFI "SETWIFI"
  27          #define PCA_LIGHT1  PCA2
  28          #define PCA_LIGHT2  7
  29          #define LIGHT1_ID PCA2
  30          #define LIGHT2_ID 7
  31          
  32          #define LIGHT_POWER_MAX 0xff
  33          #define LIGHT_POWER_MIN 0x00
  34          #define LIGHT_INIT_POWER  160
  35          #define LIGHT_POWER_INC 40
  36          #define LIGHT_POWER_DEC 40
  37          
  38          #define LIGHT1_PWM_SET    0xff - Light1Power
  39          #define LIGHT2_PWM_SET    0xff - Light2Power
  40          
  41          u8 Light1Power;
  42          u8 Light2Power;
  43          
  44          static void DHT11_Start(void)
  45          {     
  46   1        DH_Pin=1;   
  47   1        delay_10us(1);
  48   1        DH_Pin=0;   
  49   1        delay_ms(18);   //延时18ms以上   
  50   1        DH_Pin=1;   
  51   1        delay_10us(4);
  52   1      }
  53          
  54          static u8 DHT11_rec_byte(void)      //接收一个字节
C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 2   

  55          {   
  56   1        u8 i,dat=0;  
  57   1        for(i=0;i<8;i++)    //从高到低依次接收8位数据   
  58   1        {                
  59   2          while(!DH_Pin);   ////等待50us低电平过去      ，延时函数有误差
  60   2          delay_10us(2);
  61   2          dat<<=1;           //移位使正确接收8位数据，数据为0时直接移位      
  62   2          if(DH_Pin==1)    //数据为1时，使dat加1来接收数据1         
  63   2          dat+=1;      
  64   2          while(DH_Pin);  //等待数据线拉低        
  65   2        }     
  66   1        return dat;
  67   1      }
  68          
  69          static s16 DHT11_Receive(u8 *cmd)      //接收40位的数据
  70          {    
  71   1        u8 RH=0,RL=0,TH=0,TL=0,check=0;    
  72   1        u16 temp, humi;
  73   1        DHT11_Start();    
  74   1        if(DH_Pin==0)    
  75   1        {        
  76   2          while(DH_Pin==0);   //等待拉高       
  77   2          EA=0;
  78   2          delay_10us(8);  //拉高后延时80us        
  79   2          RH=DHT11_rec_byte();    //接收湿度高八位         
  80   2          RL=DHT11_rec_byte();    //接收湿度低八位          
  81   2          TH=DHT11_rec_byte();    //接收温度高八位         
  82   2          TL=DHT11_rec_byte();    //接收温度低八位       
  83   2          check=DHT11_rec_byte(); //接收校正位        
  84   2          EA=1;
  85   2          if((RH+RL+TH+TL)==check)      //校正        
  86   2            debug("DHT11 true  \r\n");
  87   2          else
  88   2            debug("DHT11 false  \r\n");
  89   2      
  90   2          temp = TH;
  91   2          humi = RH;
  92   2      
  93   2        }
  94   1        if(strstr(cmd, KEYWORD_TEMP))
  95   1          return temp;
  96   1        else if(strstr(cmd, KEYWORD_HUMI))
  97   1          return humi;
  98   1        return 0xffff;
  99   1      }
 100          
 101          static u8 SwitchControl(u8 *buf)
 102          {
 103   1        u8 *cmd=buf;
 104   1        debug_vip(buf);
 105   1        if(strstr(buf, "SWITCH1=ON"))
 106   1          SWITCH1_ON();
 107   1        else if(strstr(buf, "SWITCH1=OFF"))
 108   1          SWITCH1_OFF();
 109   1        if(strstr(buf, "SWITCH2=ON"))
 110   1          SWITCH2_ON();
 111   1        else if(strstr(buf, "SWITCH2=OFF"))
 112   1          SWITCH2_OFF();
 113   1        if(strstr(buf, "SWITCH3=ON"))
 114   1          SWITCH3_ON();
 115   1        else if(strstr(buf, "SWITCH3=OFF"))
 116   1          SWITCH3_OFF();
C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 3   

 117   1        if(strstr(buf, "SWITCH4=ON"))
 118   1          SWITCH4_ON();
 119   1        else if(strstr(buf, "SWITCH4=OFF"))
 120   1          SWITCH4_OFF();
 121   1        
 122   1        return 1;
 123   1      }
 124          static u8 LightOn(u8 light_id)
 125          {
 126   1        if (light_id==LIGHT1_ID)
 127   1        {
 128   2          Light1Power=LIGHT_INIT_POWER;
 129   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 130   2          return 1;
 131   2        }
 132   1        else if (light_id==LIGHT2_ID)
 133   1        {
 134   2          Light2Power=LIGHT_INIT_POWER;
 135   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 136   2          return 1;
 137   2        }
 138   1        else 
 139   1          return 0;
 140   1      }
 141          static u8 LightOff(u8 light_id)
 142          {
 143   1        if (light_id==LIGHT1_ID)
 144   1        {
 145   2          Light1Power=LIGHT_POWER_MIN;
 146   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 147   2          return 1;
 148   2        }
 149   1        else if (light_id==LIGHT2_ID)
 150   1        {
 151   2          Light2Power=0;
 152   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 153   2          return 1;
 154   2        }
 155   1        else 
 156   1          return 0;
 157   1      }
 158          
 159          static u8 LightPowerInc(u8 light_id)
 160          {
 161   1        if (light_id==LIGHT1_ID)
 162   1        {
 163   2          if((LIGHT_POWER_MAX - Light1Power) < LIGHT_POWER_INC)
 164   2            Light1Power=LIGHT_POWER_MAX;
 165   2          else
 166   2            Light1Power += LIGHT_POWER_INC;
 167   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 168   2          return 1;
 169   2        }
 170   1        else if (light_id==LIGHT2_ID)
 171   1        {
 172   2          if((LIGHT_POWER_MAX - Light2Power) < LIGHT_POWER_INC)
 173   2            Light2Power=LIGHT_POWER_MAX;
 174   2          else
 175   2            Light2Power += LIGHT_POWER_INC;
 176   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 177   2          return 1;
 178   2        }
C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 4   

 179   1        else 
 180   1          return 0;
 181   1      }
 182          static u8 LightPowerDec(u8 light_id)
 183          {
 184   1        if (light_id==LIGHT1_ID)
 185   1        {
 186   2          if((Light1Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 187   2            Light1Power=LIGHT_POWER_MIN;
 188   2          else
 189   2            Light1Power -= LIGHT_POWER_DEC;
 190   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 191   2          return 1;
 192   2        }
 193   1        else if (light_id==LIGHT2_ID)
 194   1        {
 195   2          if((Light2Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 196   2            Light2Power=LIGHT_POWER_MIN;
 197   2          else
 198   2            Light2Power -= LIGHT_POWER_DEC;
 199   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 200   2          return 1;
 201   2        }
 202   1        else 
 203   1          return 0;
 204   1      }
 205          
 206          static u8 LightControl(u8 *buf)
 207          {
 208   1        u8 *cmd=buf;
 209   1        u8 *p;
 210   1        if( p=strstr(cmd, KEYWORD_LIGHT))
 211   1        {
 212   2          switch(*(p+sizeof(KEYWORD_LIGHT)))
 213   2          {
 214   3            case '1':
 215   3              if(strstr((char *)cmd, "ON"))
 216   3              {
 217   4                LightOn(LIGHT1_ID);
 218   4                debug("light1 on!\r\n");
 219   4              }
 220   3              else if(strstr((char *)cmd, "OFF"))
 221   3              {
 222   4                LightOff(LIGHT1_ID);
 223   4                debug("light1 off!\r\n");
 224   4              }
 225   3              else if(strstr((char *)cmd, "INC"))
 226   3              {
 227   4                LightPowerInc(LIGHT1_ID);
 228   4                debug("light1 inc!\r\n");
 229   4              }
 230   3              else if(strstr((char *)cmd, "DEC"))
 231   3              {
 232   4                LightPowerDec(LIGHT1_ID);
 233   4                debug("light1 dec!\r\n");
 234   4              }
 235   3              break;
 236   3            case '2':
 237   3              if(strstr((char *)cmd, "ON"))
 238   3              {
 239   4                LightOn(LIGHT2_ID);
 240   4                debug("light1 on!\r\n");
C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 5   

 241   4              }
 242   3              else if(strstr((char *)cmd, "OFF"))
 243   3              {
 244   4                LightOff(LIGHT2_ID);
 245   4                debug("light1 off!\r\n");
 246   4              }
 247   3              else if(strstr((char *)cmd, "INC"))
 248   3              {
 249   4                LightPowerInc(LIGHT2_ID);
 250   4                debug("light2 inc!\r\n");
 251   4              }
 252   3              else if(strstr((char *)cmd, "DEC"))
 253   3              {
 254   4                LightPowerDec(LIGHT2_ID);
 255   4                debug("light2 dec!\r\n");
 256   4              }
 257   3              break;
 258   3            default:
 259   3              debug("light invalid command222\r\n");
 260   3              break;
 261   3          }
 262   2        }
 263   1        else
 264   1        {
 265   2          debug("invalid command111\r\n");
 266   2        }
 267   1        return 1;
 268   1      }
 269          
 270          void DevicesInit(void)
 271          {
 272   1        GPIO_InitTypeDef  light_pin_init, switch_pin_init, dh_pin_init, server_light_pin_init;
 273   1        PCA_InitTypeDef pca_init;
 274   1      
 275   1        switch_pin_init.Mode=GPIO_OUT_PP;
 276   1        switch_pin_init.Pin=SWITCH1_GPIO_PIN;
 277   1        GPIO_Inilize(SWITCH1_GPIO_PORT,&switch_pin_init);
 278   1        switch_pin_init.Pin=SWITCH2_GPIO_PIN|SWITCH3_GPIO_PIN|SWITCH4_GPIO_PIN;
 279   1        GPIO_Inilize(SWITCH2_GPIO_PORT,&switch_pin_init);
 280   1      
 281   1        server_light_pin_init.Mode=GPIO_OUT_PP;
 282   1        server_light_pin_init.Pin=SERVER_GPIO_PIN;
 283   1        GPIO_Inilize(SERVER_GPIO_PORT,&switch_pin_init);
 284   1      
 285   1        dh_pin_init.Mode=GPIO_PullUp;
 286   1        dh_pin_init.Pin=DH_GPIO_PIN;
 287   1        GPIO_Inilize(DH_GPIO_PORT, &dh_pin_init);
 288   1      
 289   1        light_pin_init.Mode=GPIO_OUT_PP;
 290   1        light_pin_init.Pin=LIGHT1_GPIO_PIN;
 291   1        GPIO_Inilize(LIGHT1_GPIO_PORT, &light_pin_init);
 292   1        light_pin_init.Pin=LIGHT2_GPIO_PIN;
 293   1        GPIO_Inilize(LIGHT2_GPIO_PORT, &light_pin_init);
 294   1        
 295   1        pca_init.PCA_IoUse = PCA_P12_P11_P10_P37;
 296   1        pca_init.PCA_Clock = PCA_Clock_12T;
 297   1        pca_init.PCA_Mode = PCA_Mode_PWM;
 298   1        pca_init.PCA_PWM_Wide = PCA_PWM_8bit;
 299   1        pca_init.PCA_Interrupt_Mode = DISABLE;
 300   1        pca_init.PCA_Polity = PolityHigh;
 301   1        pca_init.PCA_Value = 0;
 302   1      
C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 6   

 303   1        PCA_Init(PCA_Counter, &pca_init);
 304   1        PCA_Init(PCA_LIGHT1, &pca_init);
 305   1        PCA_Init(PCA_LIGHT2, &pca_init);
 306   1      
 307   1        SWITCH1_OFF();
 308   1        SWITCH2_OFF();
 309   1        SWITCH3_OFF();
 310   1        SWITCH4_OFF();
 311   1      
 312   1        SERVER_LIGHT_OFF();
 313   1      
 314   1        LightOff(PCA_LIGHT1);
 315   1        LightOff(PCA_LIGHT2);
 316   1        LIGHT1_OFF();
 317   1        LIGHT2_OFF();
 318   1      
 319   1        Light1Power=0;
 320   1        Light2Power=0;
 321   1      }
 322          
 323          u8 DevicesControl(u8 *cmd)
 324          {
 325   1        u8 *p;
 326   1        p=strstr(cmd, KEYWORD_SWITCH);
 327   1        if(p)
 328   1        {
 329   2          if(SwitchControl(p))
 330   2            return 1;
 331   2          else
 332   2            return 0;
 333   2        }
 334   1        else if(p=strstr(cmd, KEYWORD_LIGHT))
 335   1          LightControl(p);
 336   1        else if(p=strstr(cmd, KEYWORD_TEMP))
 337   1          DHT11_Receive(p);
 338   1        else if(p=strstr(cmd, KEYWORD_HUMI))
 339   1          DHT11_Receive(p);
 340   1        
 341   1        return 1;
 342   1      }
 343          
 344          u8 DeviceGetStatus(u8 *status)
 345          {
 346   1        if(GPIO_GetBit(SWITCH1_GPIO_PORT, SWITCH1_GPIO_PIN))
 347   1          strcat(status, "SWITCH1=ON");
 348   1        else
 349   1          strcat(status, "SWITCH1=OFF");
 350   1        if(GPIO_GetBit(SWITCH2_GPIO_PORT, SWITCH2_GPIO_PIN))
 351   1          strcat(status, "&SWITCH2=ON");
 352   1        else
 353   1          strcat(status, "&SWITCH2=OFF");
 354   1        if(GPIO_GetBit(SWITCH3_GPIO_PORT, SWITCH3_GPIO_PIN))
 355   1          strcat(status, "&SWITCH3=ON");
 356   1        else
 357   1          strcat(status, "&SWITCH3=OFF");
 358   1        if(GPIO_GetBit(SWITCH4_GPIO_PORT, SWITCH4_GPIO_PIN))
 359   1          strcat(status, "&SWITCH4=ON");
 360   1        else
 361   1          strcat(status, "&SWITCH4=OFF");
 362   1        return 1;
 363   1      }

C51 COMPILER V9.56.0.0   DEVICES                                                           08/10/2020 22:04:47 PAGE 7   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2118    ----
   CONSTANT SIZE    =    367    ----
   XDATA SIZE       =      2      52
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

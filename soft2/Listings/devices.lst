C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DEVICES
OBJECT MODULE PLACED IN .\Objects\devices.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE APP\devices.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC_LIB;.\APP) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\devices.lst) TABS(2) OBJECT(.\Objects\devices.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      devices.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制AI  实验板与上层控制设备的交互
   7          协议: 
   8              设置wifi: 命令"SETWIFI ssid password", 成功返回"OK", 失败返回"FAIL"
   9              设置switch: 命令"SWITCHx ON/OFF", 成功返回"OK", 失败返回"FAIL"
  10              设置light: 命令"LIGHTx ON/OFF/INC/DEC", 成功返回"OK", 失败返回"FAIL"
  11              获取temp: 命令"TEMP", 返回"OK temp"
  12              获取humi: 命令"HUMI", 返回"OK humi"
  13          *******************************************************************************/
  14          
  15          #include "usart.h"
  16          #include "devices.h"
  17          #include "string.h"
  18          #include "bsp.h"
  19          #include  "PCA.h"
  20          #include<intrins.h>
  21          
  22          #define KEYWORD_SWITCH  "SWITCH"
  23          #define KEYWORD_LIGHT   "LIGHT"
  24          #define KEYWORD_TEMP    "TEMP"
  25          #define KEYWORD_HUMI    "HUMI"
  26          #define KEYWORD_SETWIFI "SETWIFI"
  27          #define PCA_LIGHT1  PCA2
  28          #define PCA_LIGHT2  7
  29          #define LIGHT1_ID PCA2
  30          #define LIGHT2_ID 7
  31          
  32          #define LIGHT_POWER_MAX 0xff
  33          #define LIGHT_POWER_MIN 0x00
  34          #define LIGHT_INIT_POWER  160
  35          #define LIGHT_POWER_INC 40
  36          #define LIGHT_POWER_DEC 40
  37          
  38          #define LIGHT1_PWM_SET    0xff - Light1Power
  39          #define LIGHT2_PWM_SET    0xff - Light2Power
  40          
  41          u8 Light1Power;
  42          u8 Light2Power;
  43          
  44          static void DHT11_Start(void)
  45          {     
  46   1        DH_Pin=1;   
  47   1        delay_10us(1);
  48   1        DH_Pin=0;   
  49   1        delay_ms(18);   //延时18ms以上   
  50   1        DH_Pin=1;   
  51   1        delay_10us(4);
  52   1      }
  53          
  54          static u8 DHT11_rec_byte(void)      //接收一个字节
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 2   

  55          {   
  56   1        u8 i,dat=0;  
  57   1        for(i=0;i<8;i++)    //从高到低依次接收8位数据   
  58   1        {                
  59   2          while(!DH_Pin);   ////等待50us低电平过去      ，延时函数有误差
  60   2          delay_10us(2);
  61   2          dat<<=1;           //移位使正确接收8位数据，数据为0时直接移位      
  62   2          if(DH_Pin==1)    //数据为1时，使dat加1来接收数据1         
  63   2          dat+=1;      
  64   2          while(DH_Pin);  //等待数据线拉低        
  65   2        }     
  66   1        return dat;
  67   1      }
  68          
  69          static s16 DHT11_Receive(u8 *cmd)      //接收40位的数据
  70          {    
  71   1        u8 RH=0,RL=0,TH=0,TL=0,check=0;    
  72   1        u16 temp, humi;
  73   1        DHT11_Start();    
  74   1        if(DH_Pin==0)    
  75   1        {        
  76   2          while(DH_Pin==0);   //等待拉高       
  77   2          EA=0;
  78   2          delay_10us(8);  //拉高后延时80us        
  79   2          RH=DHT11_rec_byte();    //接收湿度高八位         
  80   2          RL=DHT11_rec_byte();    //接收湿度低八位          
  81   2          TH=DHT11_rec_byte();    //接收温度高八位         
  82   2          TL=DHT11_rec_byte();    //接收温度低八位       
  83   2          check=DHT11_rec_byte(); //接收校正位        
  84   2          EA=1;
  85   2          if((RH+RL+TH+TL)==check)      //校正        
  86   2            debug("DHT11 true  \r\n");
  87   2          else
  88   2            debug("DHT11 false  \r\n");
  89   2      
  90   2          temp = TH;
  91   2          humi = RH;
  92   2      
  93   2        }
  94   1        if(strstr(cmd, KEYWORD_TEMP))
  95   1          return temp;
  96   1        else if(strstr(cmd, KEYWORD_HUMI))
  97   1          return humi;
  98   1        return 0xffff;
  99   1      }
 100          
 101          static u8 SwitchControl(u8 *buf)
 102          {
 103   1        u8 *cmd=buf;
 104   1        debug(">>>>>>>>>>>>>>");
 105   1        debug(cmd);
 106   1        debug("\r\n");
 107   1        switch(*(cmd+sizeof(KEYWORD_SWITCH)-1))
 108   1        {
 109   2          case '1':
 110   2            if(strstr((char *)cmd, "ON"))
 111   2            {
 112   3              SWITCH1_ON();
 113   3              debug("1 on!\r\n");
 114   3            }
 115   2            else if(strstr((char *)cmd, "OFF"))
 116   2            {
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 3   

 117   3              SWITCH1_OFF();
 118   3              debug("1 off!\r\n");
 119   3            }
 120   2            break;
 121   2          case '2':
 122   2            if(strstr((char *)cmd, "ON"))
 123   2            {
 124   3              SWITCH2_ON();
 125   3              debug("2 on!\r\n");
 126   3            }
 127   2            else if(strstr((char *)cmd, "OFF"))
 128   2            {
 129   3              SWITCH2_OFF();
 130   3              debug("2 off!\r\n");
 131   3            }
 132   2            break;
 133   2          case '3':
 134   2            if(strstr((char *)cmd, "ON"))
 135   2            {
 136   3              SWITCH3_ON();
 137   3              debug("3 on!\r\n");
 138   3            }
 139   2            else if(strstr((char *)cmd, "OFF"))
 140   2            {
 141   3              SWITCH3_OFF();
 142   3              debug("3 off!\r\n");
 143   3            }
 144   2            break;
 145   2          case '4':
 146   2            if(strstr((char *)cmd, "ON"))
 147   2            {
 148   3              SWITCH4_ON();
 149   3              debug("4 on!\r\n");
 150   3            }
 151   2            else if(strstr((char *)cmd, "OFF"))
 152   2            {
 153   3              SWITCH4_OFF();
 154   3              debug("4 off!\r\n");
 155   3            }
 156   2            break;
 157   2          default:
 158   2            debug("switch invalid command\r\n");
 159   2            return 0;
 160   2            break;
 161   2        }
 162   1        return 1;
 163   1      }
 164          static u8 LightOn(u8 light_id)
 165          {
 166   1        if (light_id==LIGHT1_ID)
 167   1        {
 168   2          Light1Power=LIGHT_INIT_POWER;
 169   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 170   2          return 1;
 171   2        }
 172   1        else if (light_id==LIGHT2_ID)
 173   1        {
 174   2          Light2Power=LIGHT_INIT_POWER;
 175   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 176   2          return 1;
 177   2        }
 178   1        else 
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 4   

 179   1          return 0;
 180   1      }
 181          static u8 LightOff(u8 light_id)
 182          {
 183   1        if (light_id==LIGHT1_ID)
 184   1        {
 185   2          Light1Power=LIGHT_POWER_MIN;
 186   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 187   2          return 1;
 188   2        }
 189   1        else if (light_id==LIGHT2_ID)
 190   1        {
 191   2          Light2Power=0;
 192   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 193   2          return 1;
 194   2        }
 195   1        else 
 196   1          return 0;
 197   1      }
 198          
 199          static u8 LightPowerInc(u8 light_id)
 200          {
 201   1        if (light_id==LIGHT1_ID)
 202   1        {
 203   2          if((LIGHT_POWER_MAX - Light1Power) < LIGHT_POWER_INC)
 204   2            Light1Power=LIGHT_POWER_MAX;
 205   2          else
 206   2            Light1Power += LIGHT_POWER_INC;
 207   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 208   2          return 1;
 209   2        }
 210   1        else if (light_id==LIGHT2_ID)
 211   1        {
 212   2          if((LIGHT_POWER_MAX - Light2Power) < LIGHT_POWER_INC)
 213   2            Light2Power=LIGHT_POWER_MAX;
 214   2          else
 215   2            Light2Power += LIGHT_POWER_INC;
 216   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 217   2          return 1;
 218   2        }
 219   1        else 
 220   1          return 0;
 221   1      }
 222          static u8 LightPowerDec(u8 light_id)
 223          {
 224   1        if (light_id==LIGHT1_ID)
 225   1        {
 226   2          if((Light1Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 227   2            Light1Power=LIGHT_POWER_MIN;
 228   2          else
 229   2            Light1Power -= LIGHT_POWER_DEC;
 230   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 231   2          return 1;
 232   2        }
 233   1        else if (light_id==LIGHT2_ID)
 234   1        {
 235   2          if((Light2Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 236   2            Light2Power=LIGHT_POWER_MIN;
 237   2          else
 238   2            Light2Power -= LIGHT_POWER_DEC;
 239   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 240   2          return 1;
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 5   

 241   2        }
 242   1        else 
 243   1          return 0;
 244   1      }
 245          
 246          static u8 LightControl(u8 *buf)
 247          {
 248   1        u8 *cmd=buf;
 249   1        u8 *p;
 250   1        if( p=strstr(cmd, KEYWORD_LIGHT))
 251   1        {
 252   2          switch(*(p+sizeof(KEYWORD_LIGHT)))
 253   2          {
 254   3            case '1':
 255   3              if(strstr((char *)cmd, "ON"))
 256   3              {
 257   4                LightOn(LIGHT1_ID);
 258   4                debug("light1 on!\r\n");
 259   4              }
 260   3              else if(strstr((char *)cmd, "OFF"))
 261   3              {
 262   4                LightOff(LIGHT1_ID);
 263   4                debug("light1 off!\r\n");
 264   4              }
 265   3              else if(strstr((char *)cmd, "INC"))
 266   3              {
 267   4                LightPowerInc(LIGHT1_ID);
 268   4                debug("light1 inc!\r\n");
 269   4              }
 270   3              else if(strstr((char *)cmd, "DEC"))
 271   3              {
 272   4                LightPowerDec(LIGHT1_ID);
 273   4                debug("light1 dec!\r\n");
 274   4              }
 275   3              break;
 276   3            case '2':
 277   3              if(strstr((char *)cmd, "ON"))
 278   3              {
 279   4                LightOn(LIGHT2_ID);
 280   4                debug("light1 on!\r\n");
 281   4              }
 282   3              else if(strstr((char *)cmd, "OFF"))
 283   3              {
 284   4                LightOff(LIGHT2_ID);
 285   4                debug("light1 off!\r\n");
 286   4              }
 287   3              else if(strstr((char *)cmd, "INC"))
 288   3              {
 289   4                LightPowerInc(LIGHT2_ID);
 290   4                debug("light2 inc!\r\n");
 291   4              }
 292   3              else if(strstr((char *)cmd, "DEC"))
 293   3              {
 294   4                LightPowerDec(LIGHT2_ID);
 295   4                debug("light2 dec!\r\n");
 296   4              }
 297   3              break;
 298   3            default:
 299   3              debug("light invalid command222\r\n");
 300   3              break;
 301   3          }
 302   2        }
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 6   

 303   1        else
 304   1        {
 305   2          debug("invalid command111\r\n");
 306   2        }
 307   1        return 1;
 308   1      }
 309          
 310          void DevicesInit(void)
 311          {
 312   1        GPIO_InitTypeDef  light_pin_init, switch_pin_init, dh_pin_init;
 313   1        PCA_InitTypeDef pca_init;
 314   1      
 315   1        switch_pin_init.Mode=GPIO_OUT_PP;
 316   1        switch_pin_init.Pin=SWITCH1_GPIO_PIN;
 317   1        GPIO_Inilize(SWITCH1_GPIO_PORT,&switch_pin_init);
 318   1        switch_pin_init.Pin=SWITCH2_GPIO_PIN|SWITCH3_GPIO_PIN|SWITCH4_GPIO_PIN;
 319   1        GPIO_Inilize(SWITCH2_GPIO_PORT,&switch_pin_init);
 320   1      
 321   1        dh_pin_init.Mode=GPIO_PullUp;
 322   1        dh_pin_init.Pin=DH_GPIO_PIN;
 323   1        GPIO_Inilize(DH_GPIO_PORT, &dh_pin_init);
 324   1      
 325   1        light_pin_init.Mode=GPIO_OUT_PP;
 326   1        light_pin_init.Pin=LIGHT1_GPIO_PIN;
 327   1        GPIO_Inilize(LIGHT1_GPIO_PORT, &light_pin_init);
 328   1        light_pin_init.Pin=LIGHT2_GPIO_PIN;
 329   1        GPIO_Inilize(LIGHT2_GPIO_PORT, &light_pin_init);
 330   1        
 331   1        pca_init.PCA_IoUse = PCA_P12_P11_P10_P37;
 332   1        pca_init.PCA_Clock = PCA_Clock_12T;
 333   1        pca_init.PCA_Mode = PCA_Mode_PWM;
 334   1        pca_init.PCA_PWM_Wide = PCA_PWM_8bit;
 335   1        pca_init.PCA_Interrupt_Mode = DISABLE;
 336   1        pca_init.PCA_Polity = PolityHigh;
 337   1        pca_init.PCA_Value = 0;
 338   1      
 339   1        PCA_Init(PCA_Counter, &pca_init);
 340   1        PCA_Init(PCA_LIGHT1, &pca_init);
 341   1        PCA_Init(PCA_LIGHT2, &pca_init);
 342   1      
 343   1        SWITCH1_OFF();
 344   1        SWITCH2_OFF();
 345   1        SWITCH3_OFF();
 346   1        SWITCH4_OFF();
 347   1      
 348   1        LightOff(PCA_LIGHT1);
 349   1        LightOff(PCA_LIGHT2);
 350   1      
 351   1        Light1Power=0;
 352   1        Light2Power=0;
 353   1      }
 354          
 355          u8 DevicesControl(u8 *cmd)
 356          {
 357   1        u8 *p;
 358   1        p=strstr(cmd, KEYWORD_SWITCH);
 359   1        if(p)
 360   1        {
 361   2          if(SwitchControl(p))
 362   2            return 1;
 363   2          else
 364   2            return 0;
C51 COMPILER V9.56.0.0   DEVICES                                                           07/23/2020 20:48:31 PAGE 7   

 365   2        }
 366   1        else if(p=strstr(cmd, KEYWORD_LIGHT))
 367   1          LightControl(p);
 368   1        else if(p=strstr(cmd, KEYWORD_TEMP))
 369   1          DHT11_Receive(p);
 370   1        else if(p=strstr(cmd, KEYWORD_HUMI))
 371   1          DHT11_Receive(p);
 372   1        
 373   1        return 1;
 374   1      }
 375          
 376          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1985    ----
   CONSTANT SIZE    =    311    ----
   XDATA SIZE       =      2      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

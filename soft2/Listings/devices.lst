C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DEVICES
OBJECT MODULE PLACED IN .\Objects\devices.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE APP\devices.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\
                    -STC_LIB;.\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\devices.lst) TABS(2) OBJECT(.\Objects\devices.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      devices.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-4-17
   6            * @brief: 控制AI  实验板与上层控制设备的交互
   7          协议: 
   8              设置wifi: 命令"SETWIFI ssid password", 成功返回"OK", 失败返回"FAIL"
   9              设置switch: 命令"SWITCHx ON/OFF", 成功返回"OK", 失败返回"FAIL"
  10              设置light: 命令"LIGHTx ON/OFF/INC/DEC", 成功返回"OK", 失败返回"FAIL"
  11              获取temp: 命令"TEMP", 返回"OK temp"
  12              获取humi: 命令"HUMI", 返回"OK humi"
  13          *******************************************************************************/
  14          
  15          #include "usart.h"
  16          #include "devices.h"
  17          #include "string.h"
  18          #include "bsp.h"
  19          #include  "PCA.h"
  20          #include<intrins.h>
  21          
  22          #define KEYWORD_SWITCH  "SWITCH"
  23          #define KEYWORD_LIGHT   "LIGHT"
  24          #define KEYWORD_TEMP    "TEMP"
  25          #define KEYWORD_HUMI    "HUMI"
  26          #define KEYWORD_SETWIFI "SETWIFI"
  27          #define PCA_LIGHT1  PCA2
  28          #define PCA_LIGHT2  7
  29          #define LIGHT1_ID PCA2
  30          #define LIGHT2_ID 7
  31          
  32          #define LIGHT_POWER_MAX 0xff
  33          #define LIGHT_POWER_MIN 0x00
  34          #define LIGHT_INIT_POWER  160
  35          #define LIGHT_POWER_INC 40
  36          #define LIGHT_POWER_DEC 40
  37          
  38          #define LIGHT1_PWM_SET    0xff - Light1Power
  39          #define LIGHT2_PWM_SET    0xff - Light2Power
  40          
  41          u8 Light1Power;
  42          u8 Light2Power;
  43          
  44          static void DHT11_Start(void)
  45          {     
  46   1        DH_Pin=1;   
  47   1        delay_10us(1);
  48   1        DH_Pin=0;   
  49   1        delay_ms(18);   //延时18ms以上   
  50   1        DH_Pin=1;   
  51   1        delay_10us(4);
  52   1      }
  53          
  54          static u8 DHT11_rec_byte(void)      //接收一个字节
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 2   

  55          {   
  56   1        u8 i,dat=0;  
  57   1        for(i=0;i<8;i++)    //从高到低依次接收8位数据   
  58   1        {                
  59   2          while(!DH_Pin);   ////等待50us低电平过去      ，延时函数有误差
  60   2          delay_10us(2);
  61   2          dat<<=1;           //移位使正确接收8位数据，数据为0时直接移位      
  62   2          if(DH_Pin==1)    //数据为1时，使dat加1来接收数据1         
  63   2          dat+=1;      
  64   2          while(DH_Pin);  //等待数据线拉低        
  65   2        }     
  66   1        return dat;
  67   1      }
  68          
  69          static s16 DHT11_Receive(u8 *cmd)      //接收40位的数据
  70          {    
  71   1        u8 RH=0,RL=0,TH=0,TL=0,check=0;    
  72   1        u16 temp, humi;
  73   1        DHT11_Start();    
  74   1        if(DH_Pin==0)    
  75   1        {        
  76   2          while(DH_Pin==0);   //等待拉高       
  77   2          EA=0;
  78   2          delay_10us(8);  //拉高后延时80us        
  79   2          RH=DHT11_rec_byte();    //接收湿度高八位         
  80   2          RL=DHT11_rec_byte();    //接收湿度低八位          
  81   2          TH=DHT11_rec_byte();    //接收温度高八位         
  82   2          TL=DHT11_rec_byte();    //接收温度低八位       
  83   2          check=DHT11_rec_byte(); //接收校正位        
  84   2          EA=1;
  85   2          if((RH+RL+TH+TL)==check)      //校正        
  86   2            debug("DHT11 true  \r\n");
  87   2          else
  88   2            debug("DHT11 false  \r\n");
  89   2      
  90   2          temp = TH;
  91   2          humi = RH;
  92   2      
  93   2        }
  94   1        if(strstr(cmd, KEYWORD_TEMP))
  95   1          return temp;
  96   1        else if(strstr(cmd, KEYWORD_HUMI))
  97   1          return humi;
  98   1        return 0xffff;
  99   1      }
 100          
 101          static u8 SwitchControl(u8 *buf)
 102          {
 103   1        u8 *cmd=buf;
 104   1        switch(*(cmd+sizeof(KEYWORD_SWITCH)))
 105   1        {
 106   2          case '1':
 107   2            if(strstr((char *)cmd, "ON"))
 108   2            {
 109   3              SWITCH1_ON();
 110   3              debug("1 on!\r\n");
 111   3            }
 112   2            else if(strstr((char *)cmd, "OFF"))
 113   2            {
 114   3              SWITCH1_OFF();
 115   3              debug("1 off!\r\n");
 116   3            }
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 3   

 117   2            break;
 118   2          case '2':
 119   2            if(strstr((char *)cmd, "ON"))
 120   2            {
 121   3              SWITCH2_ON();
 122   3              debug("2 on!\r\n");
 123   3            }
 124   2            else if(strstr((char *)cmd, "OFF"))
 125   2            {
 126   3              SWITCH2_OFF();
 127   3              debug("2 off!\r\n");
 128   3            }
 129   2            break;
 130   2          case '3':
 131   2            if(strstr((char *)cmd, "ON"))
 132   2            {
 133   3              SWITCH3_ON();
 134   3              debug("3 on!\r\n");
 135   3            }
 136   2            else if(strstr((char *)cmd, "OFF"))
 137   2            {
 138   3              SWITCH3_OFF();
 139   3              debug("3 off!\r\n");
 140   3            }
 141   2            break;
 142   2          case '4':
 143   2            if(strstr((char *)cmd, "ON"))
 144   2            {
 145   3              SWITCH4_ON();
 146   3              debug("4 on!\r\n");
 147   3            }
 148   2            else if(strstr((char *)cmd, "OFF"))
 149   2            {
 150   3              SWITCH4_OFF();
 151   3              debug("4 off!\r\n");
 152   3            }
 153   2            break;
 154   2          default:
 155   2            debug("switch invalid command\r\n");
 156   2            return 0;
 157   2            break;
 158   2        }
 159   1        return 1;
 160   1      }
 161          static u8 LightOn(u8 light_id)
 162          {
 163   1        if (light_id==LIGHT1_ID)
 164   1        {
 165   2          Light1Power=LIGHT_INIT_POWER;
 166   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 167   2          return 1;
 168   2        }
 169   1        else if (light_id==LIGHT2_ID)
 170   1        {
 171   2          Light2Power=LIGHT_INIT_POWER;
 172   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 173   2          return 1;
 174   2        }
 175   1        else 
 176   1          return 0;
 177   1      }
 178          static u8 LightOff(u8 light_id)
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 4   

 179          {
 180   1        if (light_id==LIGHT1_ID)
 181   1        {
 182   2          Light1Power=LIGHT_POWER_MIN;
 183   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 184   2          return 1;
 185   2        }
 186   1        else if (light_id==LIGHT2_ID)
 187   1        {
 188   2          Light2Power=0;
 189   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 190   2          return 1;
 191   2        }
 192   1        else 
 193   1          return 0;
 194   1      }
 195          
 196          static u8 LightPowerInc(u8 light_id)
 197          {
 198   1        if (light_id==LIGHT1_ID)
 199   1        {
 200   2          if((LIGHT_POWER_MAX - Light1Power) < LIGHT_POWER_INC)
 201   2            Light1Power=LIGHT_POWER_MAX;
 202   2          else
 203   2            Light1Power += LIGHT_POWER_INC;
 204   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 205   2          return 1;
 206   2        }
 207   1        else if (light_id==LIGHT2_ID)
 208   1        {
 209   2          if((LIGHT_POWER_MAX - Light2Power) < LIGHT_POWER_INC)
 210   2            Light2Power=LIGHT_POWER_MAX;
 211   2          else
 212   2            Light2Power += LIGHT_POWER_INC;
 213   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 214   2          return 1;
 215   2        }
 216   1        else 
 217   1          return 0;
 218   1      }
 219          static u8 LightPowerDec(u8 light_id)
 220          {
 221   1        if (light_id==LIGHT1_ID)
 222   1        {
 223   2          if((Light1Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 224   2            Light1Power=LIGHT_POWER_MIN;
 225   2          else
 226   2            Light1Power -= LIGHT_POWER_DEC;
 227   2          PWMn_Update(PCA0, LIGHT1_PWM_SET);
 228   2          return 1;
 229   2        }
 230   1        else if (light_id==LIGHT2_ID)
 231   1        {
 232   2          if((Light2Power - LIGHT_POWER_MIN)<LIGHT_POWER_DEC)
 233   2            Light2Power=LIGHT_POWER_MIN;
 234   2          else
 235   2            Light2Power -= LIGHT_POWER_DEC;
 236   2          PWMn_Update(PCA1, LIGHT2_PWM_SET);
 237   2          return 1;
 238   2        }
 239   1        else 
 240   1          return 0;
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 5   

 241   1      }
 242          
 243          static u8 LightControl(u8 *buf)
 244          {
 245   1        u8 *cmd=buf;
 246   1        u8 *p;
 247   1        if( p=strstr(cmd, KEYWORD_LIGHT))
 248   1        {
 249   2          switch(*(p+sizeof(KEYWORD_LIGHT)))
 250   2          {
 251   3            case '1':
 252   3              if(strstr((char *)cmd, "ON"))
 253   3              {
 254   4                LightOn(LIGHT1_ID);
 255   4                debug("light1 on!\r\n");
 256   4              }
 257   3              else if(strstr((char *)cmd, "OFF"))
 258   3              {
 259   4                LightOff(LIGHT1_ID);
 260   4                debug("light1 off!\r\n");
 261   4              }
 262   3              else if(strstr((char *)cmd, "INC"))
 263   3              {
 264   4                LightPowerInc(LIGHT1_ID);
 265   4                debug("light1 inc!\r\n");
 266   4              }
 267   3              else if(strstr((char *)cmd, "DEC"))
 268   3              {
 269   4                LightPowerDec(LIGHT1_ID);
 270   4                debug("light1 dec!\r\n");
 271   4              }
 272   3              break;
 273   3            case '2':
 274   3              if(strstr((char *)cmd, "ON"))
 275   3              {
 276   4                LightOn(LIGHT2_ID);
 277   4                debug("light1 on!\r\n");
 278   4              }
 279   3              else if(strstr((char *)cmd, "OFF"))
 280   3              {
 281   4                LightOff(LIGHT2_ID);
 282   4                debug("light1 off!\r\n");
 283   4              }
 284   3              else if(strstr((char *)cmd, "INC"))
 285   3              {
 286   4                LightPowerInc(LIGHT2_ID);
 287   4                debug("light2 inc!\r\n");
 288   4              }
 289   3              else if(strstr((char *)cmd, "DEC"))
 290   3              {
 291   4                LightPowerDec(LIGHT2_ID);
 292   4                debug("light2 dec!\r\n");
 293   4              }
 294   3              break;
 295   3            default:
 296   3              debug("light invalid command222\r\n");
 297   3              break;
 298   3          }
 299   2        }
 300   1        else
 301   1        {
 302   2          debug("invalid command111\r\n");
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 6   

 303   2        }
 304   1        return 1;
 305   1      }
 306          
 307          void DevicesInit(void)
 308          {
 309   1        GPIO_InitTypeDef  light_pin_init, switch_pin_init, dh_pin_init;
 310   1        PCA_InitTypeDef pca_init;
 311   1      
 312   1        switch_pin_init.Mode=GPIO_OUT_PP;
 313   1        switch_pin_init.Pin=SWITCH1_GPIO_PIN;
 314   1        GPIO_Inilize(SWITCH1_GPIO_PORT,&switch_pin_init);
 315   1        switch_pin_init.Pin=SWITCH2_GPIO_PIN|SWITCH3_GPIO_PIN|SWITCH4_GPIO_PIN;
 316   1        GPIO_Inilize(SWITCH2_GPIO_PORT,&switch_pin_init);
 317   1      
 318   1        dh_pin_init.Mode=GPIO_PullUp;
 319   1        dh_pin_init.Pin=DH_GPIO_PIN;
 320   1        GPIO_Inilize(DH_GPIO_PORT, &dh_pin_init);
 321   1      
 322   1        light_pin_init.Mode=GPIO_OUT_PP;
 323   1        light_pin_init.Pin=LIGHT1_GPIO_PIN;
 324   1        GPIO_Inilize(LIGHT1_GPIO_PORT, &light_pin_init);
 325   1        light_pin_init.Pin=LIGHT2_GPIO_PIN;
 326   1        GPIO_Inilize(LIGHT2_GPIO_PORT, &light_pin_init);
 327   1        
 328   1        pca_init.PCA_IoUse = PCA_P12_P11_P10_P37;
 329   1        pca_init.PCA_Clock = PCA_Clock_12T;
 330   1        pca_init.PCA_Mode = PCA_Mode_PWM;
 331   1        pca_init.PCA_PWM_Wide = PCA_PWM_8bit;
 332   1        pca_init.PCA_Interrupt_Mode = DISABLE;
 333   1        pca_init.PCA_Polity = PolityHigh;
 334   1        pca_init.PCA_Value = 0;
 335   1      
 336   1        PCA_Init(PCA_Counter, &pca_init);
 337   1        PCA_Init(PCA_LIGHT1, &pca_init);
 338   1        PCA_Init(PCA_LIGHT2, &pca_init);
 339   1      
 340   1        SWITCH1_OFF();
 341   1        SWITCH2_OFF();
 342   1        SWITCH3_OFF();
 343   1        SWITCH4_OFF();
 344   1      
 345   1        LightOff(PCA_LIGHT1);
 346   1        LightOff(PCA_LIGHT2);
 347   1      
 348   1        Light1Power=0;
 349   1        Light2Power=0;
 350   1      }
 351          
 352          u8 DevicesControl(u8 *cmd)
 353          {
 354   1        u8 *p;
 355   1        if(p=strstr(cmd, KEYWORD_SWITCH))
 356   1        {
 357   2          if(SwitchControl(p))
 358   2            return 1;
 359   2          else
 360   2            return 0;
 361   2        }
 362   1        else if(p=strstr(cmd, KEYWORD_LIGHT))
 363   1          LightControl(p);
 364   1        else if(p=strstr(cmd, KEYWORD_TEMP))
C51 COMPILER V9.56.0.0   DEVICES                                                           07/20/2020 16:39:58 PAGE 7   

 365   1          DHT11_Receive(p);
 366   1        else if(p=strstr(cmd, KEYWORD_HUMI))
 367   1          DHT11_Receive(p);
 368   1        
 369   1      }
 370          
 371          
*** WARNING C291 IN LINE 369 OF APP\devices.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1949    ----
   CONSTANT SIZE    =    293    ----
   XDATA SIZE       =      2      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.56.0.0   TASK                                                              08/11/2020 12:35:26 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TASK
OBJECT MODULE PLACED IN .\Objects\task.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE APP\task.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC
                    -_LIB;.\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\task.lst) TABS(2) OBJECT(.\Objects\task.obj)

line level    source

   1          #include "wifi.h"
   2          #include "http_text.h"
   3          #include "string.h"
   4          #include "debug.h"
   5          #include "devices.h"
   6          #include "eeprom.h"
   7          
   8          #define SERVER_IP   "119.3.233.56"
   9          #define SERVER_PORT   "5000"
  10          
  11          /***************************************************************************
  12          eap8266作为服务端，接收消息格式:
  13          +IPD,id,length:data, id 为连接的客户端id，length为接收到的字符串长度,data为数据
  14          eap8266作为服务端，接收消息格式:
  15          +IPD,length:length为接收到的字符串长度,data为数据
  16          ***************************************************************************/
  17          #define SERVER_MSG_KEYWORD  "+IPD,"
  18          #define CLIENT_MSG_KEYWORD  "+IPD,"
  19          //服务端判断请求首页关键字
  20          #define HTTP_SERVER_INDEX_KEYWORD   "GET / "    
  21          //服务端判断请求控制页关键字
  22          #define HTTP_SERVER_CONTROL_KEYWORD   "GET /?"  
  23          //服务端判断请求控制页关键字
  24          #define HTTP_SERVER_CONFIG_KEYWORD    "GET /config"   
  25          //服务端判断请求控制页关键字
  26          #define HTTP_SERVER_RES_KEYWORD   "GET /res"  
  27          
  28          
  29          //客户端判断收到控制信息关键字
  30          #define HTTP_CLIENT_CONTROL_KEYWORD   "control?" 
  31          
  32          u8 get_http_para(u8 *http_head, u8*find_para, u8 *res)
  33          {
  34   1        u8 head_size;
  35   1        u8 *p_para;
  36   1        u8 *p1,*p2, *p;
  37   1        head_size = strlen(http_head);
  38   1        http_head[head_size-1] = '&'; //最后一个为空格，为标准化处理改为&
  39   1        if(!(p_para = strstr(http_head, find_para)))
  40   1          return FAIL;
  41   1        p1 = p_para + strlen(find_para)+1;
  42   1        if(!(p2 = strstr(p1, "&")))
  43   1          return FAIL;
  44   1        p = res;
  45   1        while(p1<p2)
  46   1        {
  47   2          *p = *p1;
  48   2          p1++;
  49   2          p++;
  50   2        }
  51   1        *p = '\0';
  52   1        debug_vip(find_para);
  53   1        debug_vip(res);
  54   1        return SUCCESS;
C51 COMPILER V9.56.0.0   TASK                                                              08/11/2020 12:35:26 PAGE 2   

  55   1      }
  56          
  57          u8 *check_http_para(u8 *ssid, u8 *pwd, u8 * server, u8 *port, u8 *user, u8 *upwd)
  58          {
  59   1        if(strlen(ssid) == 0)
  60   1          return "WiFi ssid is Empty!";
  61   1        if(strlen(pwd) < 8)
  62   1        {
  63   2          return "WiFi password is less than 8 bytes!";
  64   2        }
  65   1        if(strlen(server) == 0)
  66   1        {
  67   2          return "Server ip is empty!"; 
  68   2        }
  69   1        if(strlen(port) == 0)
  70   1        {
  71   2          return "Server port is empty!"; 
  72   2        }
  73   1        if(strlen(user) == 0)
  74   1        {
  75   2          return "User is empty!"; 
  76   2        }
  77   1        if(strlen(upwd) == 0)
  78   1        {
  79   2          return "User password is empty!"; 
  80   2        }
  81   1        return "Config OK";
  82   1      
  83   1      }
  84          
  85          void task_Server(void)
  86          {
  87   1        u8 ssid[32];
  88   1        u8 pwd[32];
  89   1        u8 server[16];
  90   1        u8 port[6];
  91   1        u8 user[20];
  92   1        u8 upwd[20];
  93   1        u8 http_request_head[200];
  94   1      
  95   1        u8 *config_res;
  96   1        
  97   1        u8 *p, *temp;
  98   1        u8 client_id[2];
  99   1        temp = strstr(WIFI_RBUF, "HTTP"); //  判断是否为http 请求
 100   1        if(!temp)
 101   1          return;
 102   1        //浏览器发送的请求信息会很多，为方便处理
 103   1        //截取第一行到HTTP之前的请求有效信息
 104   1        *temp = 0x00;
 105   1        http_request_head[0] = '\0';
 106   1        strcpy(http_request_head, WIFI_RBUF);
 107   1        p = strstr(http_request_head, SERVER_MSG_KEYWORD);    //获取链接的client_id
 108   1        if(!p)
 109   1          return;
 110   1        p = p + sizeof(SERVER_MSG_KEYWORD)-1;
 111   1        client_id[0] = *p;      //
 112   1        client_id[1] = '\0';
 113   1        p = strstr(http_request_head,  HTTP_SERVER_INDEX_KEYWORD);    //请求首页?
 114   1        if(p)
 115   1        {
 116   2          WIFI_Server_HTTP_Response(client_id, HTTP_Server_Index);  //发送首页
C51 COMPILER V9.56.0.0   TASK                                                              08/11/2020 12:35:26 PAGE 3   

 117   2        }
 118   1        else if(p = strstr(http_request_head, HTTP_SERVER_CONTROL_KEYWORD)) //请求控制?
 119   1        {
 120   2          if(DevicesControl(p) == 1)    //控制外设
 121   2            WIFI_Server_HTTP_Response(client_id, HTTP_Server_Index);  //成功返回控制页面
 122   2          else
 123   2            WIFI_Server_HTTP_Response(client_id, "Devices control Fail !!!");   //师范返回信息
 124   2        }
 125   1        else if(p = strstr(http_request_head, HTTP_SERVER_CONFIG_KEYWORD))  //请求配置页面
 126   1        {
 127   2          WIFI_Server_HTTP_Response(client_id, HTTP_Server_Config); //发送
 128   2        }
 129   1        else if(p = strstr(http_request_head, HTTP_SERVER_RES_KEYWORD)) //请求配置结果页面
 130   1        {
 131   2          ssid[0] = '\0';
 132   2          pwd[0] = '\0';
 133   2          server[0] = '\0';
 134   2          port[0] = '\0';
 135   2          user[0] = '\0';
 136   2          upwd[0] = '\0';
 137   2          get_http_para(http_request_head, "ssid", ssid);
 138   2          get_http_para(http_request_head, "pwd", pwd);
 139   2          get_http_para(http_request_head, "server", server);
 140   2          get_http_para(http_request_head, "port", port);
 141   2          get_http_para(http_request_head, "user", user);
 142   2          get_http_para(http_request_head, "upwd", upwd);
 143   2          config_res =  check_http_para(ssid, pwd, server, port,user, upwd);
 144   2          WIFI_Server_HTTP_Response(client_id, config_res); //发送配置结果
 145   2          if(strstr(config_res, "OK"))    
 146   2          {
 147   3            EEPROM_SectorErase(EEPROM_START_ADDRESS);
 148   3            EEPROM_write_n(EEPROM_START_ADDRESS, http_request_head, strlen(http_request_head));
 149   3          }
 150   2        }
 151   1      }
 152          
 153          void task_Client(void)
 154          {
 155   1        u8 device_para[100];
 156   1        u8 *p;
 157   1        if(!WIFI_ClientConnectServer(SERVER_IP, SERVER_PORT))
 158   1          return;
 159   1        SERVER_LIGHT_ON();
 160   1        device_para[0] = 0;
 161   1        DeviceGetStatus(device_para); //获取设备信息字符串
 162   1         //向服务器发送设备状态http 请求
 163   1        if(!WIFI_Client_HTTP_Request(HTTP_Client_Request_Head1, device_para, HTTP_Client_Request_Head3))
 164   1          return;
 165   1        if(WIFI_Receive(1000))    //等待服务器响应
 166   1        {
 167   2          SERVER_LIGHT_OFF();
 168   2          p = strstr(WIFI_RBUF, HTTP_CLIENT_CONTROL_KEYWORD); //收到有效控制信息?
 169   2          if(p)
 170   2          {
 171   3            DevicesControl(p);
 172   3          }
 173   2        }
 174   1        else
 175   1        {
 176   2          debug("Server response timeout!\r\n");
 177   2          
 178   2        }
C51 COMPILER V9.56.0.0   TASK                                                              08/11/2020 12:35:26 PAGE 4   

 179   1        SERVER_LIGHT_OFF();
 180   1      }
 181          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1383    ----
   CONSTANT SIZE    =    308    ----
   XDATA SIZE       =   ----     473
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

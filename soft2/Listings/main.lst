C51 COMPILER V9.56.0.0   MAIN                                                              11/30/2020 15:18:56 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE APP\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC
                    -_LIB;.\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      main.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-6-6
   6            * @brief: 主程序，程序使用状态机方式执行，主状态Sys_Status，
   7            实验板启动时为init 状态，通过读取eeprom 实验板基本参数判断是否
   8            已经设置了远程服务器连接，如果未设置，则自己作为web 服务端，
   9            进入服务端任务，如果设置了，则作为web 客户端，进入客户端任务
  10            while(1),执行各个任务任务函数在执行的时候需要控制好自己的
  11            时间计数器，控制好任务的执行时间，不要超时执行
  12          *******************************************************************************/
  13          #include "config.h"
  14          #include "sys.h"
  15          #include "debug.h"
  16          #include "bsp.h"
  17          #include "task.h"
  18          #include "eeprom.h"
  19          #include "string.h"
  20          #include "eeprom.h"
  21          
  22          #define RESET_KEYWORD "reset"
  23          
  24          #define SERVER_IP "192.168.1.111"
  25          
  26          extern u8 sys_tick;
  27          u8 SystemClear;
  28          //主状态变量
  29          typedef enum _e_status_
  30          {
  31            init = 1,     //初始化
  32            server_mode,  //服务器模式
  33            client_mode   //客户端模式
  34          }_e_status;
  35          
  36          _e_status Sys_Status;
  37          
  38          typedef enum _e_client_status_
  39          {
  40            unkown=1,
  41            not_login,
  42            heart_beat
  43          }_e_client_status;
  44          
  45          _e_client_status Client_Status;
  46          
  47          extern ReloginCounter;
  48          
  49          void get_ip(u8 *ip)
  50          {
  51   1        *ip = '\0';
  52   1        strcpy(ip, SERVER_IP);
  53   1      }
  54          
C51 COMPILER V9.56.0.0   MAIN                                                              11/30/2020 15:18:56 PAGE 2   

  55          extern u16 tick_counter;
  56          void main(void)
  57          {
  58   1        u16 temp0;
  59   1        u8 ssid[32];
  60   1        u8 pwd[32];
  61   1        u8 ip[16];
  62   1        u8 port[6];
  63   1        u8 user[20];
  64   1        u8 upwd[20];
  65   1        u8 *config_res;
  66   1        u8 eeprom_buf[200];
  67   1        bsp();
  68   1        Sys_Status = init;        //设置主状态为初始化
  69   1        Client_Status = unkown;   //分状态为未知
  70   1        SystemClear = 0;
  71   1        //IAP_CONTR &= (~0x20);
  72   1        debug("\r\n\r\nsys start!!!\r\n");
  73   1        EEPROM_read_n(EEPROM_FIRST_ADDRESS, eeprom_buf, 200); //获取实验板基本信息
  74   1        eeprom_buf[199] = '\0';
  75   1        debug("########################\r\n");
  76   1        debug_vip(eeprom_buf);
  77   1        ssid[0] = '\0';
  78   1        pwd[0] = '\0';
  79   1        ip[0] = '\0';
  80   1        port[0] = '\0';
  81   1        user[0] = '\0';
  82   1        upwd[0] = '\0';
  83   1        get_http_para(eeprom_buf, "ssid", ssid);
  84   1        get_http_para(eeprom_buf, "pwd", pwd);
  85   1        //get_ip(ip);
  86   1        get_http_para(eeprom_buf, "ip", ip);
  87   1        get_http_para(eeprom_buf, "port", port);
  88   1        get_http_para(eeprom_buf, "user", user);
  89   1        get_http_para(eeprom_buf, "upwd", upwd);
  90   1        config_res =  check_http_para(ssid, pwd, ip, port,user, upwd);
  91   1        debug("@@@@@@@@@@@@@@");
  92   1        debug_vip(config_res);
  93   1        if(!strstr(config_res,"OK"))    //如果不合法则设置为服务端模式
  94   1        {
  95   2          memset(RX2_Buffer, 0, sizeof(RX2_Buffer));    //清空接收缓冲区
  96   2          while(1)
  97   2          {
  98   3            debug("wifi server reset\r\n");
  99   3            WIFI_Reset();       //硬件重启wifi 模块
 100   3            if(WIFI_SetServerMode())    //设置wifi模块为服务器(wifi 热点，让外部设备连接)模式
 101   3            {
 102   4              debug("wifi set server sucess\r\n");
 103   4              break;
 104   4            }
 105   3          }
 106   2          Sys_Status = server_mode;   
 107   2        }
 108   1        else      //否则为客户端模式
 109   1        {
 110   2          memset(RX2_Buffer, 0, sizeof(RX2_Buffer));
 111   2          while(1)
 112   2          {
 113   3            debug("wifi client reset\r\n");
 114   3            WIFI_Reset();
 115   3            if(WIFI_SetClientMode(ssid, pwd)) //设置wifi模块为客户端( 连接外部wifi )模式
 116   3            {
C51 COMPILER V9.56.0.0   MAIN                                                              11/30/2020 15:18:56 PAGE 3   

 117   4              debug("wifi set Client sucess\r\n");
 118   4              break;
 119   4            }
 120   3          }   
 121   2          Sys_Status = client_mode;
 122   2          ReloginCounter = 0;
 123   2        }
 124   1        dog_init();
 125   1        
 126   1        while(1)
 127   1        {
 128   2          switch(Sys_Status)
 129   2          {
 130   3            case server_mode:
 131   3              if(WIFI_Receive(50))      //等待客户端发送http 请求
 132   3              {
 133   4                debug(WIFI_RBUF);
 134   4                task_Server();      //执行server 模式任务
 135   4              }
 136   3              break;
 137   3            case client_mode:
 138   3              if(sys_tick == 0)   //每秒执行一次心跳
 139   3              {
 140   4                
 141   4                temp0 = tick_counter;
 142   4                task_Client(ip, port, user, upwd);  //执行client 模式任务
 143   4                debug("Time:");
 144   4                debug_time();
 145   4                debug("ticks counts:");
 146   4                debug_var(tick_counter - temp0);
 147   4                debug("\r\n");
 148   4              }
 149   3              sys_sleep();
 150   3              break;
 151   3            default:
 152   3              break;
 153   3          }
 154   2          if(COM1.RX_Cnt > 0)
 155   2          {
 156   3            if(strstr(RX1_Buffer, RESET_KEYWORD))
 157   3            {
 158   4              debug(RX1_Buffer);
 159   4              RX1_Buffer[0] = '\0';
 160   4              COM1.RX_Cnt = 0;
 161   4              sys_reset();
 162   4            }
 163   3          }
 164   2          if(SystemClear)
 165   2          {
 166   3            sys_clear();
 167   3            sys_reset();
 168   3          }
 169   2          dog_clear();
 170   2        }
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    867    ----
   CONSTANT SIZE    =    224    ----
   XDATA SIZE       =      3     334
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.56.0.0   MAIN                                                              11/30/2020 15:18:56 PAGE 4   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.56.0.0   MAIN                                                              11/17/2020 16:43:42 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil5\C51\BIN\C51.EXE APP\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\STC
                    -_LIB;.\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /*****************************************************************************
   2            * @file:      main.c
   3            * @author:    louiswoo
   4            * @version:   V1.0
   5            * @date:  2020-6-6
   6            * @brief: 主程序，程序使用状态机方式执行，主状态Sys_Status，
   7            实验板启动时为init 状态，通过读取eeprom 实验板基本参数判断是否
   8            已经设置了远程服务器连接，如果未设置，则自己作为web 服务端，
   9            进入服务端任务，如果设置了，则作为web 客户端，进入客户端任务
  10            while(1),执行各个任务任务函数在执行的时候需要控制好自己的
  11            时间计数器，控制好任务的执行时间，不要超时执行
  12          *******************************************************************************/
  13          #include "config.h"
  14          #include "sys.h"
  15          #include "debug.h"
  16          #include "bsp.h"
  17          #include "task.h"
  18          #include "eeprom.h"
  19          #include "string.h"
  20          #include "eeprom.h"
  21          
  22          #define SERVER_IP "192.168.1.108"
  23          
  24          //主状态变量
  25          typedef enum _e_status_
  26          {
  27            init = 1,     //初始化
  28            server_mode,  //服务器模式
  29            client_mode   //客户端模式
  30          }_e_status;
  31          
  32          _e_status Sys_Status;
  33          
  34          typedef enum _e_client_status_
  35          {
  36            unkown=1,
  37            not_login,
  38            heart_beat
  39          }_e_client_status;
  40          
  41          _e_client_status Client_Status;
  42          
  43          extern ReloginCounter;
  44          
  45          void get_ip(u8 *ip)
  46          {
  47   1        *ip = '\0';
  48   1        strcpy(ip, SERVER_IP);
  49   1      }
  50          
  51          extern u16 tick_counter;
  52          void main(void)
  53          {
  54   1        u16 temp0;
C51 COMPILER V9.56.0.0   MAIN                                                              11/17/2020 16:43:42 PAGE 2   

  55   1        u8 ssid[32];
  56   1        u8 pwd[32];
  57   1        u8 ip[16];
  58   1        u8 port[6];
  59   1        u8 user[20];
  60   1        u8 upwd[20];
  61   1        u8 *config_res;
  62   1        u8 eeprom_buf[200];
  63   1        bsp();
  64   1        Sys_Status = init;        //设置主状态为初始化
  65   1        Client_Status = unkown;   //分状态为未知
  66   1        while(1)
  67   1        {
  68   2          temp0 = tick_counter;
  69   2          switch(Sys_Status)
  70   2          {
  71   3            case init:
  72   3              EEPROM_read_n(EEPROM_FIRST_ADDRESS, eeprom_buf, 200); //获取实验板基本信息
  73   3              eeprom_buf[199] = '\0';
  74   3              debug("########################\r\n");
  75   3              debug_vip(eeprom_buf);
  76   3              ssid[0] = '\0';
  77   3              pwd[0] = '\0';
  78   3              ip[0] = '\0';
  79   3              port[0] = '\0';
  80   3              user[0] = '\0';
  81   3              upwd[0] = '\0';
  82   3              get_http_para(eeprom_buf, "ssid", ssid);
  83   3              get_http_para(eeprom_buf, "pwd", pwd);
  84   3              get_ip(ip);
  85   3              //get_http_para(eeprom_buf, "ip", ip);
  86   3              get_http_para(eeprom_buf, "port", port);
  87   3              get_http_para(eeprom_buf, "user", user);
  88   3              get_http_para(eeprom_buf, "upwd", upwd);
  89   3              config_res =  check_http_para(ssid, pwd, ip, port,user, upwd);
  90   3              debug("@@@@@@@@@@@@@@");
  91   3              debug_vip(config_res);
  92   3              if(!strstr(config_res,"OK"))    //如果不合法则设置为服务端模式
  93   3              {
  94   4                memset(RX2_Buffer, 0, sizeof(RX2_Buffer));    //清空接收缓冲区
  95   4                while(1)
  96   4                {
  97   5                  debug("wifi server reset\r\n");
  98   5                  WIFI_Reset();       //硬件重启wifi 模块
  99   5                  if(WIFI_SetServerMode())    //设置wifi模块为服务器(wifi 热点，让外部设备连接)模式
 100   5                  {
 101   6                    debug("wifi set server sucess\r\n");
 102   6                    break;
 103   6                  }
 104   5                }
 105   4                Sys_Status = server_mode;   
 106   4              }
 107   3              else      //否则为客户端模式
 108   3              {
 109   4                memset(RX2_Buffer, 0, sizeof(RX2_Buffer));
 110   4                while(1)
 111   4                {
 112   5                  debug("wifi client reset\r\n");
 113   5                  WIFI_Reset();
 114   5                  if(WIFI_SetClientMode(ssid, pwd)) //设置wifi模块为客户端( 连接外部wifi )模式
 115   5                  {
 116   6                    debug("wifi set Client sucess\r\n");
C51 COMPILER V9.56.0.0   MAIN                                                              11/17/2020 16:43:42 PAGE 3   

 117   6                    break;
 118   6                  }
 119   5                }   
 120   4                Sys_Status = client_mode;
 121   4                ReloginCounter = 0;
 122   4              }
 123   3              break;
 124   3            case server_mode:
 125   3              if(WIFI_Receive(50))      //等待客户端发送http 请求
 126   3              {
 127   4                debug(WIFI_RBUF);
 128   4                task_Server();      //执行server 模式任务
 129   4              }
 130   3              break;
 131   3            case client_mode:
 132   3                task_Client(ip, port, user, upwd);  //执行client 模式任务
 133   3              break;
 134   3            default:
 135   3              break;
 136   3          }
 137   2          debug("Time:");
 138   2          debug_time();
 139   2          debug("ticks interval:");
 140   2          debug_var(tick_counter - temp0);
 141   2          debug("\r\n");
 142   2          delay_ms(250);
 143   2          delay_ms(250);
 144   2        }
 145   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    756    ----
   CONSTANT SIZE    =    198    ----
   XDATA SIZE       =      2     334
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
